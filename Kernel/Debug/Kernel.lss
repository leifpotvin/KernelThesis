
Kernel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000158  00800200  00800200  000005fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000670  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001516  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb7  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000970  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00003468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022c  00000000  00000000  00003d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__vector_13>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 35       	cpi	r26, 0x58	; 88
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	2a d2       	rcall	.+1108   	; 0x55a <main>
 106:	3d c2       	rjmp	.+1146   	; 0x582 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <yield>:
#define OFFSET			r22

#define CANARY_REG		r24

yield:
		push r2
 10a:	2f 92       	push	r2
		push r3
 10c:	3f 92       	push	r3
		push r4
 10e:	4f 92       	push	r4
		push r5
 110:	5f 92       	push	r5
		push r6
 112:	6f 92       	push	r6
		push r7
 114:	7f 92       	push	r7
		push r8
 116:	8f 92       	push	r8
		push r9
 118:	9f 92       	push	r9
		push r10
 11a:	af 92       	push	r10
		push r11
 11c:	bf 92       	push	r11
		push r12
 11e:	cf 92       	push	r12
		push r13
 120:	df 92       	push	r13
		push r14
 122:	ef 92       	push	r14
		push r15
 124:	ff 92       	push	r15
		push r16
 126:	0f 93       	push	r16
		push r17
 128:	1f 93       	push	r17
	
		push r28
 12a:	cf 93       	push	r28
		push r29
 12c:	df 93       	push	r29

		//if (kernel_data.thread_ctrl_tbl[cur_thread_id].canary_ptr != CANARY) rcall stack_overflow();
		; load cur_thread_id
		ldi X_HI, hi8(kernel_data + offsetof_kernel_data_struct_cur_thread_id)
 12e:	b3 e0       	ldi	r27, 0x03	; 3
		ldi X_LO, lo8(kernel_data + offsetof_kernel_data_struct_cur_thread_id)
 130:	a2 e5       	ldi	r26, 0x52	; 82
		ld TID, X
 132:	4c 91       	ld	r20, X

		ldi X_HI, hi8(kernel_data + offsetof_kernel_data_struct_thread_ctrl_tbl)
 134:	b3 e0       	ldi	r27, 0x03	; 3
		ldi X_LO, lo8(kernel_data + offsetof_kernel_data_struct_thread_ctrl_tbl)
 136:	a0 e0       	ldi	r26, 0x00	; 0

		; compute canary_ptr offset
		ldi OFFSET, 8			; load sizeof(thread_ctrl_struct)
 138:	68 e0       	ldi	r22, 0x08	; 8
		mul OFFSET, TID
 13a:	64 9f       	mul	r22, r20
		movw OFFSET, r0
 13c:	b0 01       	movw	r22, r0

		add X_LO, OFFSET_LO		; increment kernel_data.thread_ctrl_tbl by offset to kernel_data.thread_ctrl_tbl[TID]
 13e:	a6 0f       	add	r26, r22
		adc X_HI, OFFSET_HI
 140:	b7 1f       	adc	r27, r23

		adiw X_LO, 4			; increment kernel_data.thread_ctrl_tbl[TID] to kernel_data.thread_ctrl_tbl[TID].canary_ptr
 142:	14 96       	adiw	r26, 0x04	; 4

		ld CANARY_REG, X
 144:	8c 91       	ld	r24, X
		subi CANARY_REG, CANARY
 146:	8a 5a       	subi	r24, 0xAA	; 170
		breq schedule
 148:	09 f0       	breq	.+2      	; 0x14c <schedule>
		rcall stack_overflow
 14a:	f3 d1       	rcall	.+998    	; 0x532 <stack_overflow>

0000014c <schedule>:

schedule:
	
		cli
 14c:	f8 94       	cli

		; load and compute ready stat
		ldi X_HI, hi8(kernel_data + offsetof_kernel_data_struct_disable_status)
 14e:	b3 e0       	ldi	r27, 0x03	; 3
		ldi X_LO, lo8(kernel_data + offsetof_kernel_data_struct_disable_status)
 150:	a0 e4       	ldi	r26, 0x40	; 64
		ld DISABLE_STAT, X+
 152:	2d 91       	ld	r18, X+
		ld DELAY_STAT, X
 154:	3c 91       	ld	r19, X
		or DISABLE_STAT, DELAY_STAT
 156:	23 2b       	or	r18, r19
		com READY_STAT
 158:	20 95       	com	r18

		tst READY_STAT
 15a:	22 23       	and	r18, r18
		breq sleep_mode
 15c:	09 f1       	breq	.+66     	; 0x1a0 <__vector_13>

		; load cur_thread_id
		ldi X_HI, hi8(kernel_data + offsetof_kernel_data_struct_cur_thread_id)
 15e:	b3 e0       	ldi	r27, 0x03	; 3
		ldi X_LO, lo8(kernel_data + offsetof_kernel_data_struct_cur_thread_id)
 160:	a2 e5       	ldi	r26, 0x52	; 82
		ld TID, X
 162:	4c 91       	ld	r20, X

		; load cur_thread_mask
		ldi X_HI, hi8(kernel_data + offsetof_kernel_data_struct_cur_thread_mask)
 164:	b3 e0       	ldi	r27, 0x03	; 3
		ldi X_LO, lo8(kernel_data + offsetof_kernel_data_struct_cur_thread_mask)
 166:	a3 e5       	ldi	r26, 0x53	; 83
		ld TMSK, X
 168:	5c 91       	ld	r21, X

0000016a <top_of_schedule_loop_schedule>:

top_of_schedule_loop_schedule:
		lsl TMSK				; TMSK = TMSK << 1
 16a:	55 0f       	add	r21, r21
		adc TMSK, r1			; TMSK = TMSK + 0 + carry flag
 16c:	51 1d       	adc	r21, r1

		inc TID					; TID = TID + 1
 16e:	43 95       	inc	r20
		andi TID, 0b111			; TID = TID % 8
 170:	47 70       	andi	r20, 0x07	; 7

		mov r0, READY_STAT
 172:	02 2e       	mov	r0, r18
		and r0, TMSK
 174:	05 22       	and	r0, r21
		breq top_of_schedule_loop_schedule
 176:	c9 f3       	breq	.-14     	; 0x16a <top_of_schedule_loop_schedule>

		sei
 178:	78 94       	sei

0000017a <restore>:

restore:
		pop r29
 17a:	df 91       	pop	r29
		pop r28
 17c:	cf 91       	pop	r28

		pop r17
 17e:	1f 91       	pop	r17
		pop r16
 180:	0f 91       	pop	r16
		pop r15
 182:	ff 90       	pop	r15
		pop r14
 184:	ef 90       	pop	r14
		pop r13
 186:	df 90       	pop	r13
		pop r12
 188:	cf 90       	pop	r12
		pop r11
 18a:	bf 90       	pop	r11
		pop r10
 18c:	af 90       	pop	r10
		pop r9
 18e:	9f 90       	pop	r9
		pop r8
 190:	8f 90       	pop	r8
		pop r7
 192:	7f 90       	pop	r7
		pop r6
 194:	6f 90       	pop	r6
		pop r5
 196:	5f 90       	pop	r5
		pop r4
 198:	4f 90       	pop	r4
		pop r3
 19a:	3f 90       	pop	r3
		pop r2
 19c:	2f 90       	pop	r2

		ret
 19e:	08 95       	ret

000001a0 <__vector_13>:
	__asm__("push r15");
	__asm__("push r16");
	__asm__("push r17");
	
	__asm__("push r28");
	__asm__("push r29");
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0b b6       	in	r0, 0x3b	; 59
 1ac:	0f 92       	push	r0
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	a1 e4       	ldi	r26, 0x41	; 65
 1ca:	b3 e0       	ldi	r27, 0x03	; 3
 1cc:	8c 91       	ld	r24, X
 1ce:	89 23       	and	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_13+0x56>
 1d2:	f9 01       	movw	r30, r18
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ee 5b       	subi	r30, 0xBE	; 190
 1da:	fc 4f       	sbci	r31, 0xFC	; 252
 1dc:	40 81       	ld	r20, Z
 1de:	51 81       	ldd	r21, Z+1	; 0x01
 1e0:	41 50       	subi	r20, 0x01	; 1
 1e2:	51 09       	sbc	r21, r1
 1e4:	51 83       	std	Z+1, r21	; 0x01
 1e6:	40 83       	st	Z, r20
 1e8:	45 2b       	or	r20, r21
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <__vector_13+0x56>
 1ec:	8c 91       	ld	r24, X
 1ee:	49 2f       	mov	r20, r25
 1f0:	40 95       	com	r20
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	99 0f       	add	r25, r25
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	28 30       	cpi	r18, 0x08	; 8
 1fe:	31 05       	cpc	r19, r1
 200:	29 f7       	brne	.-54     	; 0x1cc <__vector_13+0x2c>
 202:	e4 e5       	ldi	r30, 0x54	; 84
 204:	f3 e0       	ldi	r31, 0x03	; 3
 206:	80 81       	ld	r24, Z
 208:	91 81       	ldd	r25, Z+1	; 0x01
 20a:	a2 81       	ldd	r26, Z+2	; 0x02
 20c:	b3 81       	ldd	r27, Z+3	; 0x03
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	a1 1d       	adc	r26, r1
 212:	b1 1d       	adc	r27, r1
 214:	80 83       	st	Z, r24
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	a2 83       	std	Z+2, r26	; 0x02
 21a:	b3 83       	std	Z+3, r27	; 0x03
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <init_system_timer>:
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 244:	95 e0       	ldi	r25, 0x05	; 5
 246:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
 24a:	9c e7       	ldi	r25, 0x7C	; 124
 24c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
 250:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
 254:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <__DATA_REGION_ORIGIN__+0x154>
 258:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <__DATA_REGION_ORIGIN__+0x155>
 25c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__DATA_REGION_ORIGIN__+0x156>
 260:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <__DATA_REGION_ORIGIN__+0x157>
 264:	78 94       	sei
 266:	08 95       	ret

00000268 <init>:
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f2 e0       	ldi	r31, 0x02	; 2
 280:	0f 2e       	mov	r0, r31
 282:	f2 e0       	ldi	r31, 0x02	; 2
 284:	ef 2e       	mov	r14, r31
 286:	f3 e0       	ldi	r31, 0x03	; 3
 288:	ff 2e       	mov	r15, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	d7 01       	movw	r26, r14
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	9c 93       	st	X, r25
 296:	8e 93       	st	-X, r24
 298:	0a e0       	ldi	r16, 0x0A	; 10
 29a:	13 e0       	ldi	r17, 0x03	; 3
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	e8 01       	movw	r28, r16
 2a2:	99 83       	std	Y+1, r25	; 0x01
 2a4:	88 83       	st	Y, r24
 2a6:	62 e1       	ldi	r22, 0x12	; 18
 2a8:	73 e0       	ldi	r23, 0x03	; 3
 2aa:	8f e5       	ldi	r24, 0x5F	; 95
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	db 01       	movw	r26, r22
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	9c 93       	st	X, r25
 2b4:	8e 93       	st	-X, r24
 2b6:	4a e1       	ldi	r20, 0x1A	; 26
 2b8:	53 e0       	ldi	r21, 0x03	; 3
 2ba:	8f e7       	ldi	r24, 0x7F	; 127
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	ea 01       	movw	r28, r20
 2c0:	99 83       	std	Y+1, r25	; 0x01
 2c2:	88 83       	st	Y, r24
 2c4:	22 e2       	ldi	r18, 0x22	; 34
 2c6:	33 e0       	ldi	r19, 0x03	; 3
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	d9 01       	movw	r26, r18
 2ce:	11 96       	adiw	r26, 0x01	; 1
 2d0:	9c 93       	st	X, r25
 2d2:	8e 93       	st	-X, r24
 2d4:	8a e2       	ldi	r24, 0x2A	; 42
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	af eb       	ldi	r26, 0xBF	; 191
 2da:	b2 e0       	ldi	r27, 0x02	; 2
 2dc:	ec 01       	movw	r28, r24
 2de:	b9 83       	std	Y+1, r27	; 0x01
 2e0:	a8 83       	st	Y, r26
 2e2:	c2 e3       	ldi	r28, 0x32	; 50
 2e4:	d3 e0       	ldi	r29, 0x03	; 3
 2e6:	af ed       	ldi	r26, 0xDF	; 223
 2e8:	b2 e0       	ldi	r27, 0x02	; 2
 2ea:	b9 83       	std	Y+1, r27	; 0x01
 2ec:	a8 83       	st	Y, r26
 2ee:	0f 2e       	mov	r0, r31
 2f0:	fa e3       	ldi	r31, 0x3A	; 58
 2f2:	af 2e       	mov	r10, r31
 2f4:	f3 e0       	ldi	r31, 0x03	; 3
 2f6:	bf 2e       	mov	r11, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	0f 2e       	mov	r0, r31
 2fc:	ff ef       	ldi	r31, 0xFF	; 255
 2fe:	cf 2e       	mov	r12, r31
 300:	f2 e0       	ldi	r31, 0x02	; 2
 302:	df 2e       	mov	r13, r31
 304:	f0 2d       	mov	r31, r0
 306:	d5 01       	movw	r26, r10
 308:	11 96       	adiw	r26, 0x01	; 1
 30a:	dc 92       	st	X, r13
 30c:	ce 92       	st	-X, r12
 30e:	d7 01       	movw	r26, r14
 310:	ed 90       	ld	r14, X+
 312:	fc 90       	ld	r15, X
 314:	f0 92 01 03 	sts	0x0301, r15	; 0x800301 <__DATA_REGION_ORIGIN__+0x101>
 318:	e0 92 00 03 	sts	0x0300, r14	; 0x800300 <__DATA_REGION_ORIGIN__+0x100>
 31c:	d8 01       	movw	r26, r16
 31e:	0d 91       	ld	r16, X+
 320:	1c 91       	ld	r17, X
 322:	10 93 09 03 	sts	0x0309, r17	; 0x800309 <__DATA_REGION_ORIGIN__+0x109>
 326:	00 93 08 03 	sts	0x0308, r16	; 0x800308 <__DATA_REGION_ORIGIN__+0x108>
 32a:	db 01       	movw	r26, r22
 32c:	6d 91       	ld	r22, X+
 32e:	7c 91       	ld	r23, X
 330:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <__DATA_REGION_ORIGIN__+0x111>
 334:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <__DATA_REGION_ORIGIN__+0x110>
 338:	da 01       	movw	r26, r20
 33a:	4d 91       	ld	r20, X+
 33c:	5c 91       	ld	r21, X
 33e:	50 93 19 03 	sts	0x0319, r21	; 0x800319 <__DATA_REGION_ORIGIN__+0x119>
 342:	40 93 18 03 	sts	0x0318, r20	; 0x800318 <__DATA_REGION_ORIGIN__+0x118>
 346:	d9 01       	movw	r26, r18
 348:	2d 91       	ld	r18, X+
 34a:	3c 91       	ld	r19, X
 34c:	30 93 21 03 	sts	0x0321, r19	; 0x800321 <__DATA_REGION_ORIGIN__+0x121>
 350:	20 93 20 03 	sts	0x0320, r18	; 0x800320 <__DATA_REGION_ORIGIN__+0x120>
 354:	dc 01       	movw	r26, r24
 356:	8d 91       	ld	r24, X+
 358:	9c 91       	ld	r25, X
 35a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <__DATA_REGION_ORIGIN__+0x129>
 35e:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__DATA_REGION_ORIGIN__+0x128>
 362:	88 81       	ld	r24, Y
 364:	99 81       	ldd	r25, Y+1	; 0x01
 366:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <__DATA_REGION_ORIGIN__+0x131>
 36a:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <__DATA_REGION_ORIGIN__+0x130>
 36e:	e5 01       	movw	r28, r10
 370:	88 81       	ld	r24, Y
 372:	99 81       	ldd	r25, Y+1	; 0x01
 374:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__DATA_REGION_ORIGIN__+0x139>
 378:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__DATA_REGION_ORIGIN__+0x138>
 37c:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__DATA_REGION_ORIGIN__+0x105>
 380:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__DATA_REGION_ORIGIN__+0x104>
 384:	81 e2       	ldi	r24, 0x21	; 33
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <__DATA_REGION_ORIGIN__+0x10d>
 38c:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__DATA_REGION_ORIGIN__+0x10c>
 390:	82 e4       	ldi	r24, 0x42	; 66
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__DATA_REGION_ORIGIN__+0x115>
 398:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__DATA_REGION_ORIGIN__+0x114>
 39c:	83 e6       	ldi	r24, 0x63	; 99
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <__DATA_REGION_ORIGIN__+0x11d>
 3a4:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <__DATA_REGION_ORIGIN__+0x11c>
 3a8:	84 e8       	ldi	r24, 0x84	; 132
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <__DATA_REGION_ORIGIN__+0x125>
 3b0:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__DATA_REGION_ORIGIN__+0x124>
 3b4:	85 ea       	ldi	r24, 0xA5	; 165
 3b6:	92 e0       	ldi	r25, 0x02	; 2
 3b8:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <__DATA_REGION_ORIGIN__+0x12d>
 3bc:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <__DATA_REGION_ORIGIN__+0x12c>
 3c0:	86 ec       	ldi	r24, 0xC6	; 198
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__DATA_REGION_ORIGIN__+0x135>
 3c8:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__DATA_REGION_ORIGIN__+0x134>
 3cc:	87 ee       	ldi	r24, 0xE7	; 231
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <__DATA_REGION_ORIGIN__+0x13d>
 3d4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <__DATA_REGION_ORIGIN__+0x13c>
 3d8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <__DATA_REGION_ORIGIN__+0x107>
 3dc:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <__DATA_REGION_ORIGIN__+0x106>
 3e0:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <__DATA_REGION_ORIGIN__+0x10f>
 3e4:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__DATA_REGION_ORIGIN__+0x10e>
 3e8:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__DATA_REGION_ORIGIN__+0x117>
 3ec:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__DATA_REGION_ORIGIN__+0x116>
 3f0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <__DATA_REGION_ORIGIN__+0x11f>
 3f4:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <__DATA_REGION_ORIGIN__+0x11e>
 3f8:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <__DATA_REGION_ORIGIN__+0x127>
 3fc:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <__DATA_REGION_ORIGIN__+0x126>
 400:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <__DATA_REGION_ORIGIN__+0x12f>
 404:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <__DATA_REGION_ORIGIN__+0x12e>
 408:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <__DATA_REGION_ORIGIN__+0x137>
 40c:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <__DATA_REGION_ORIGIN__+0x136>
 410:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <__DATA_REGION_ORIGIN__+0x13f>
 414:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <__DATA_REGION_ORIGIN__+0x13e>
 418:	8a ea       	ldi	r24, 0xAA	; 170
 41a:	80 83       	st	Z, r24
 41c:	80 a3       	std	Z+32, r24	; 0x20
 41e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__DATA_REGION_ORIGIN__+0x40>
 422:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__DATA_REGION_ORIGIN__+0x60>
 426:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__DATA_REGION_ORIGIN__+0x80>
 42a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__DATA_REGION_ORIGIN__+0xa0>
 42e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__DATA_REGION_ORIGIN__+0xc0>
 432:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__DATA_REGION_ORIGIN__+0xe0>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <__DATA_REGION_ORIGIN__+0x140>
 43c:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <__DATA_REGION_ORIGIN__+0x141>
 440:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <__DATA_REGION_ORIGIN__+0x143>
 444:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <__DATA_REGION_ORIGIN__+0x142>
 448:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <__DATA_REGION_ORIGIN__+0x145>
 44c:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <__DATA_REGION_ORIGIN__+0x144>
 450:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <__DATA_REGION_ORIGIN__+0x147>
 454:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <__DATA_REGION_ORIGIN__+0x146>
 458:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <__DATA_REGION_ORIGIN__+0x149>
 45c:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__DATA_REGION_ORIGIN__+0x148>
 460:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <__DATA_REGION_ORIGIN__+0x14b>
 464:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <__DATA_REGION_ORIGIN__+0x14a>
 468:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__DATA_REGION_ORIGIN__+0x14d>
 46c:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__DATA_REGION_ORIGIN__+0x14c>
 470:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <__DATA_REGION_ORIGIN__+0x14f>
 474:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <__DATA_REGION_ORIGIN__+0x14e>
 478:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <__DATA_REGION_ORIGIN__+0x151>
 47c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <__DATA_REGION_ORIGIN__+0x150>
 480:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__DATA_REGION_ORIGIN__+0x152>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <__DATA_REGION_ORIGIN__+0x153>
 48a:	d9 de       	rcall	.-590    	; 0x23e <init_system_timer>
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	08 95       	ret

000004a2 <x_malloc>:
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <new>:
 4a8:	e8 2f       	mov	r30, r24
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	9f 01       	movw	r18, r30
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	22 0f       	add	r18, r18
 4b4:	33 1f       	adc	r19, r19
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	20 50       	subi	r18, 0x00	; 0
 4bc:	3e 4f       	sbci	r19, 0xFE	; 254
 4be:	d9 01       	movw	r26, r18
 4c0:	ae 5f       	subi	r26, 0xFE	; 254
 4c2:	be 4f       	sbci	r27, 0xFE	; 254
 4c4:	0d 90       	ld	r0, X+
 4c6:	bc 91       	ld	r27, X
 4c8:	a0 2d       	mov	r26, r0
 4ca:	52 97       	sbiw	r26, 0x12	; 18
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	e0 50       	subi	r30, 0x00	; 0
 4da:	fd 4f       	sbci	r31, 0xFD	; 253
 4dc:	b1 83       	std	Z+1, r27	; 0x01
 4de:	a0 83       	st	Z, r26
 4e0:	f9 01       	movw	r30, r18
 4e2:	ea 5f       	subi	r30, 0xFA	; 250
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	71 83       	std	Z+1, r23	; 0x01
 4e8:	60 83       	st	Z, r22
 4ea:	44 23       	and	r20, r20
 4ec:	79 f0       	breq	.+30     	; 0x50c <new+0x64>
 4ee:	e0 e4       	ldi	r30, 0x40	; 64
 4f0:	f3 e0       	ldi	r31, 0x03	; 3
 4f2:	90 81       	ld	r25, Z
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	08 2e       	mov	r0, r24
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <new+0x58>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <new+0x54>
 504:	20 95       	com	r18
 506:	29 23       	and	r18, r25
 508:	20 83       	st	Z, r18
 50a:	0d c0       	rjmp	.+26     	; 0x526 <new+0x7e>
 50c:	e0 e4       	ldi	r30, 0x40	; 64
 50e:	f3 e0       	ldi	r31, 0x03	; 3
 510:	90 81       	ld	r25, Z
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	08 2e       	mov	r0, r24
 518:	02 c0       	rjmp	.+4      	; 0x51e <new+0x76>
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <new+0x72>
 522:	29 2b       	or	r18, r25
 524:	20 83       	st	Z, r18
 526:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <__DATA_REGION_ORIGIN__+0x152>
 52a:	89 13       	cpse	r24, r25
 52c:	01 c0       	rjmp	.+2      	; 0x530 <new+0x88>
 52e:	0e ce       	rjmp	.-996    	; 0x14c <schedule>
 530:	08 95       	ret

00000532 <stack_overflow>:
// 	
// }

void stack_overflow()
{
	DDRB |= 0x80;
 532:	27 9a       	sbi	0x04, 7	; 4
	while (1)
	{
		PORTB ^= 0x80;
 534:	85 b1       	in	r24, 0x05	; 5
 536:	80 58       	subi	r24, 0x80	; 128
 538:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	84 e3       	ldi	r24, 0x34	; 52
 53e:	9c e0       	ldi	r25, 0x0C	; 12
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <stack_overflow+0xe>
 548:	00 c0       	rjmp	.+0      	; 0x54a <stack_overflow+0x18>
 54a:	00 00       	nop
 54c:	f3 cf       	rjmp	.-26     	; 0x534 <stack_overflow+0x2>

0000054e <f0>:

void f0()
{
	while(1)
	{
		yield();
 54e:	dd dd       	rcall	.-1094   	; 0x10a <yield>
 550:	fe cf       	rjmp	.-4      	; 0x54e <f0>

00000552 <f1>:

void f1()
{
	while(1)
	{
		yield();
 552:	db dd       	rcall	.-1098   	; 0x10a <yield>
 554:	fe cf       	rjmp	.-4      	; 0x552 <f1>

00000556 <f2>:

void f2()
{
	while(1)
	{
		yield();
 556:	d9 dd       	rcall	.-1102   	; 0x10a <yield>
 558:	fe cf       	rjmp	.-4      	; 0x556 <f2>

0000055a <main>:
	}
}

int main(void)
{
    init();
 55a:	86 de       	rcall	.-756    	; 0x268 <init>
	
	new(1, f1, true);
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	69 ea       	ldi	r22, 0xA9	; 169
 560:	72 e0       	ldi	r23, 0x02	; 2
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	a1 df       	rcall	.-190    	; 0x4a8 <new>
	new(2, f2, true);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	6b ea       	ldi	r22, 0xAB	; 171
 56a:	72 e0       	ldi	r23, 0x02	; 2
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	9c df       	rcall	.-200    	; 0x4a8 <new>
	new(0, f0, true);
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	67 ea       	ldi	r22, 0xA7	; 167
 574:	72 e0       	ldi	r23, 0x02	; 2
 576:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
		x_malloc(10);
 578:	97 df       	rcall	.-210    	; 0x4a8 <new>
 57a:	8a e0       	ldi	r24, 0x0A	; 10
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	91 df       	rcall	.-222    	; 0x4a2 <x_malloc>
 580:	fc cf       	rjmp	.-8      	; 0x57a <main+0x20>

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
