
Kernel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000459  00800200  00800200  00000620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f8  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd4  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086d  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007da  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051e  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	e2 c1       	rjmp	.+964    	; 0x3fa <__vector_13>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 35       	cpi	r26, 0x59	; 89
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	4a d2       	rcall	.+1172   	; 0x59a <main>
 106:	50 c2       	rjmp	.+1184   	; 0x5a8 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <push_pthread>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
 10a:	28 e0       	ldi	r18, 0x08	; 8
 10c:	82 9f       	mul	r24, r18
 10e:	c0 01       	movw	r24, r0
 110:	11 24       	eor	r1, r1
 112:	fc 01       	movw	r30, r24
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	fa 4f       	sbci	r31, 0xFA	; 250
 118:	a0 81       	ld	r26, Z
 11a:	b1 81       	ldd	r27, Z+1	; 0x01
 11c:	cd 01       	movw	r24, r26
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
 124:	6c 93       	st	X, r22
 126:	a0 81       	ld	r26, Z
 128:	b1 81       	ldd	r27, Z+1	; 0x01
 12a:	cd 01       	movw	r24, r26
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24
 132:	7c 93       	st	X, r23
 134:	a0 81       	ld	r26, Z
 136:	b1 81       	ldd	r27, Z+1	; 0x01
 138:	cd 01       	movw	r24, r26
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
 140:	1c 92       	st	X, r1
 142:	08 95       	ret

00000144 <init>:
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f b7       	in	r17, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	8f e7       	ldi	r24, 0x7F	; 127
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__DATA_REGION_ORIGIN__+0x403>
 156:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__DATA_REGION_ORIGIN__+0x402>
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <__DATA_REGION_ORIGIN__+0x40b>
 162:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__DATA_REGION_ORIGIN__+0x40a>
 166:	8f e7       	ldi	r24, 0x7F	; 127
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <__DATA_REGION_ORIGIN__+0x413>
 16e:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <__DATA_REGION_ORIGIN__+0x412>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	90 93 1b 06 	sts	0x061B, r25	; 0x80061b <__DATA_REGION_ORIGIN__+0x41b>
 17a:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__DATA_REGION_ORIGIN__+0x41a>
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	94 e0       	ldi	r25, 0x04	; 4
 182:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <__DATA_REGION_ORIGIN__+0x423>
 186:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__DATA_REGION_ORIGIN__+0x422>
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <__DATA_REGION_ORIGIN__+0x42b>
 192:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__DATA_REGION_ORIGIN__+0x42a>
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	90 93 33 06 	sts	0x0633, r25	; 0x800633 <__DATA_REGION_ORIGIN__+0x433>
 19e:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <__DATA_REGION_ORIGIN__+0x432>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <__DATA_REGION_ORIGIN__+0x43b>
 1aa:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <__DATA_REGION_ORIGIN__+0x43a>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__DATA_REGION_ORIGIN__+0x405>
 1b6:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__DATA_REGION_ORIGIN__+0x404>
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <__DATA_REGION_ORIGIN__+0x40d>
 1c2:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__DATA_REGION_ORIGIN__+0x40c>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	93 e0       	ldi	r25, 0x03	; 3
 1ca:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <__DATA_REGION_ORIGIN__+0x415>
 1ce:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__DATA_REGION_ORIGIN__+0x414>
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <__DATA_REGION_ORIGIN__+0x41d>
 1da:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__DATA_REGION_ORIGIN__+0x41c>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__DATA_REGION_ORIGIN__+0x425>
 1e6:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__DATA_REGION_ORIGIN__+0x424>
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	94 e0       	ldi	r25, 0x04	; 4
 1ee:	90 93 2d 06 	sts	0x062D, r25	; 0x80062d <__DATA_REGION_ORIGIN__+0x42d>
 1f2:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <__DATA_REGION_ORIGIN__+0x42c>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	95 e0       	ldi	r25, 0x05	; 5
 1fa:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <__DATA_REGION_ORIGIN__+0x435>
 1fe:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <__DATA_REGION_ORIGIN__+0x434>
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <__DATA_REGION_ORIGIN__+0x43d>
 20a:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <__DATA_REGION_ORIGIN__+0x43c>
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	6a ea       	ldi	r22, 0xAA	; 170
 214:	c9 01       	movw	r24, r18
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	80 50       	subi	r24, 0x00	; 0
 224:	9e 4f       	sbci	r25, 0xFE	; 254
 226:	fc 01       	movw	r30, r24
 228:	ee 5f       	subi	r30, 0xFE	; 254
 22a:	fb 4f       	sbci	r31, 0xFB	; 251
 22c:	40 81       	ld	r20, Z
 22e:	51 81       	ldd	r21, Z+1	; 0x01
 230:	f9 01       	movw	r30, r18
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	fa 4f       	sbci	r31, 0xFA	; 250
 242:	51 83       	std	Z+1, r21	; 0x01
 244:	40 83       	st	Z, r20
 246:	fc 01       	movw	r30, r24
 248:	ea 5f       	subi	r30, 0xFA	; 250
 24a:	fb 4f       	sbci	r31, 0xFB	; 251
 24c:	11 82       	std	Z+1, r1	; 0x01
 24e:	10 82       	st	Z, r1
 250:	32 97       	sbiw	r30, 0x02	; 2
 252:	01 90       	ld	r0, Z+
 254:	f0 81       	ld	r31, Z
 256:	e0 2d       	mov	r30, r0
 258:	60 83       	st	Z, r22
 25a:	f9 01       	movw	r30, r18
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	ee 5b       	subi	r30, 0xBE	; 190
 262:	f9 4f       	sbci	r31, 0xF9	; 249
 264:	11 82       	std	Z+1, r1	; 0x01
 266:	10 82       	st	Z, r1
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	28 30       	cpi	r18, 0x08	; 8
 26e:	31 05       	cpc	r19, r1
 270:	89 f6       	brne	.-94     	; 0x214 <init+0xd0>
 272:	8e ef       	ldi	r24, 0xFE	; 254
 274:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__DATA_REGION_ORIGIN__+0x440>
 278:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <__DATA_REGION_ORIGIN__+0x441>
 27c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <__DATA_REGION_ORIGIN__+0x452>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__DATA_REGION_ORIGIN__+0x453>
 286:	8d b7       	in	r24, 0x3d	; 61
 288:	9e b7       	in	r25, 0x3e	; 62
 28a:	8f 3f       	cpi	r24, 0xFF	; 255
 28c:	91 42       	sbci	r25, 0x21	; 33
 28e:	98 f4       	brcc	.+38     	; 0x2b6 <init+0x172>
 290:	ef ef       	ldi	r30, 0xFF	; 255
 292:	f1 e2       	ldi	r31, 0x21	; 33
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d6 e0       	ldi	r29, 0x06	; 6
 298:	a8 81       	ld	r26, Y
 29a:	b9 81       	ldd	r27, Y+1	; 0x01
 29c:	9d 01       	movw	r18, r26
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	31 09       	sbc	r19, r1
 2a2:	39 83       	std	Y+1, r19	; 0x01
 2a4:	28 83       	st	Y, r18
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	21 81       	ldd	r18, Z+1	; 0x01
 2aa:	2c 93       	st	X, r18
 2ac:	2d b7       	in	r18, 0x3d	; 61
 2ae:	3e b7       	in	r19, 0x3e	; 62
 2b0:	2e 17       	cp	r18, r30
 2b2:	3f 07       	cpc	r19, r31
 2b4:	88 f3       	brcs	.-30     	; 0x298 <init+0x154>
 2b6:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__DATA_REGION_ORIGIN__+0x400>
 2ba:	90 91 01 06 	lds	r25, 0x0601	; 0x800601 <__DATA_REGION_ORIGIN__+0x401>
 2be:	9e bf       	out	0x3e, r25	; 62
 2c0:	8d bf       	out	0x3d, r24	; 61
 2c2:	ea d0       	rcall	.+468    	; 0x498 <init_system_timer>
 2c4:	1f bf       	out	0x3f, r17	; 63
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	08 95       	ret

000002ce <delay>:
 2ce:	ac 01       	movw	r20, r24
 2d0:	2f b7       	in	r18, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <__DATA_REGION_ORIGIN__+0x453>
 2d8:	e1 e4       	ldi	r30, 0x41	; 65
 2da:	f6 e0       	ldi	r31, 0x06	; 6
 2dc:	90 81       	ld	r25, Z
 2de:	98 2b       	or	r25, r24
 2e0:	90 83       	st	Z, r25
 2e2:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <__DATA_REGION_ORIGIN__+0x452>
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	ee 5b       	subi	r30, 0xBE	; 190
 2ee:	f9 4f       	sbci	r31, 0xF9	; 249
 2f0:	51 83       	std	Z+1, r21	; 0x01
 2f2:	40 83       	st	Z, r20
 2f4:	2f bf       	out	0x3f, r18	; 63
 2f6:	08 95       	ret

000002f8 <stack_overflow>:
/*
 *	Function that will be entered when a stack overflow is detected.
 */
void stack_overflow()
{
	DDRB |= 0x80;
 2f8:	27 9a       	sbi	0x04, 7	; 4
	while (1)
	{
		PORTB ^= 0x80;
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	80 58       	subi	r24, 0x80	; 128
 2fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	84 e3       	ldi	r24, 0x34	; 52
 304:	9c e0       	ldi	r25, 0x0C	; 12
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <stack_overflow+0xe>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <stack_overflow+0x18>
 310:	00 00       	nop
 312:	f3 cf       	rjmp	.-26     	; 0x2fa <stack_overflow+0x2>

00000314 <new>:
 *	thread_id:		id of the new thread. Must be between zero and MAX_THREADS
 *	entry_point:	function pointer to the entry point of the thread
 *	enabled:		boolean value if the thread is enabled
 */
void new(uint8_t thread_id, PTHREAD entry_point, bool enabled)
{
 314:	af 92       	push	r10
 316:	bf 92       	push	r11
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	f8 2e       	mov	r15, r24
 32a:	5b 01       	movw	r10, r22
 32c:	e4 2e       	mov	r14, r20
	// reset stack pointer to its base
	kernel_data.thread_ctrl_tbl[thread_id].stack_ptr = kernel_data.thread_ctrl_tbl[thread_id].stack_base;
 32e:	c8 2e       	mov	r12, r24
 330:	d1 2c       	mov	r13, r1
 332:	e6 01       	movw	r28, r12
 334:	cc 0f       	add	r28, r28
 336:	dd 1f       	adc	r29, r29
 338:	cc 0f       	add	r28, r28
 33a:	dd 1f       	adc	r29, r29
 33c:	cc 0f       	add	r28, r28
 33e:	dd 1f       	adc	r29, r29
 340:	c0 50       	subi	r28, 0x00	; 0
 342:	de 4f       	sbci	r29, 0xFE	; 254
 344:	fe 01       	movw	r30, r28
 346:	ee 5f       	subi	r30, 0xFE	; 254
 348:	fb 4f       	sbci	r31, 0xFB	; 251
 34a:	80 81       	ld	r24, Z
 34c:	91 81       	ldd	r25, Z+1	; 0x01
 34e:	86 01       	movw	r16, r12
 350:	00 0f       	add	r16, r16
 352:	11 1f       	adc	r17, r17
 354:	00 0f       	add	r16, r16
 356:	11 1f       	adc	r17, r17
 358:	00 0f       	add	r16, r16
 35a:	11 1f       	adc	r17, r17
 35c:	00 50       	subi	r16, 0x00	; 0
 35e:	1a 4f       	sbci	r17, 0xFA	; 250
 360:	f8 01       	movw	r30, r16
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
	// push the entry point to the stack
	push_pthread(thread_id, entry_point);
 366:	8f 2d       	mov	r24, r15
 368:	d0 de       	rcall	.-608    	; 0x10a <push_pthread>
	// decrement the stack pointer for the thread's context
	kernel_data.thread_ctrl_tbl[thread_id].stack_ptr -= THREAD_STACK_CONTEXT_SZ;
 36a:	f8 01       	movw	r30, r16
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	81 97       	sbiw	r24, 0x21	; 33
 372:	91 83       	std	Z+1, r25	; 0x01
 374:	80 83       	st	Z, r24
	// save the entry point to the thread's control data
	kernel_data.thread_ctrl_tbl[thread_id].entry_pnt = entry_point;
 376:	ca 5f       	subi	r28, 0xFA	; 250
 378:	db 4f       	sbci	r29, 0xFB	; 251
 37a:	b9 82       	std	Y+1, r11	; 0x01
 37c:	a8 82       	st	Y, r10
	
	// set or clear thread's disable bit
	if (!enabled)
 37e:	e1 10       	cpse	r14, r1
 380:	0e c0       	rjmp	.+28     	; 0x39e <new+0x8a>
	{
		kernel_data.disable_status |= (0x1 << thread_id);
 382:	e0 e4       	ldi	r30, 0x40	; 64
 384:	f6 e0       	ldi	r31, 0x06	; 6
 386:	20 81       	ld	r18, Z
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0f 2c       	mov	r0, r15
 38e:	02 c0       	rjmp	.+4      	; 0x394 <new+0x80>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <new+0x7c>
 398:	82 2b       	or	r24, r18
 39a:	80 83       	st	Z, r24
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <new+0xa6>
	}
	else
	{
		kernel_data.disable_status &= ~(0x1 << thread_id);
 39e:	e0 e4       	ldi	r30, 0x40	; 64
 3a0:	f6 e0       	ldi	r31, 0x06	; 6
 3a2:	20 81       	ld	r18, Z
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0f 2c       	mov	r0, r15
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <new+0x9c>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <new+0x98>
 3b4:	80 95       	com	r24
 3b6:	82 23       	and	r24, r18
 3b8:	80 83       	st	Z, r24
	}
	
	// if the current thread is being recreated, verify stack canary and invoke the scheduler
	if (thread_id == kernel_data.cur_thread_id)
 3ba:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <__DATA_REGION_ORIGIN__+0x452>
 3be:	f8 12       	cpse	r15, r24
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <new+0xd0>
	{
		if (*(kernel_data.thread_ctrl_tbl[thread_id].canary_ptr) != CANARY) stack_overflow();
 3c2:	f6 01       	movw	r30, r12
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	ec 5f       	subi	r30, 0xFC	; 252
 3d2:	f9 4f       	sbci	r31, 0xF9	; 249
 3d4:	01 90       	ld	r0, Z+
 3d6:	f0 81       	ld	r31, Z
 3d8:	e0 2d       	mov	r30, r0
 3da:	80 81       	ld	r24, Z
 3dc:	8a 3a       	cpi	r24, 0xAA	; 170
 3de:	09 f0       	breq	.+2      	; 0x3e2 <new+0xce>
		schedule();
 3e0:	8b df       	rcall	.-234    	; 0x2f8 <stack_overflow>
 3e2:	75 d0       	rcall	.+234    	; 0x4ce <schedule>
	}
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	df 90       	pop	r13
 3f2:	cf 90       	pop	r12
 3f4:	bf 90       	pop	r11
 3f6:	af 90       	pop	r10
 3f8:	08 95       	ret

000003fa <__vector_13>:

/*
 *	ISR for timer 2. Set to fire every millisecond
 */
ISR(TIMER2_COMPA_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	0b b6       	in	r0, 0x3b	; 59
 406:	0f 92       	push	r0
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
	// check if each thread is delayed and decrement its counter if so
	uint8_t msk = 0x01;
 420:	91 e0       	ldi	r25, 0x01	; 1
	for (uint8_t i = 0; i < MAX_THREADS; ++i)
	{
		if (kernel_data.delay_status & msk)
 422:	a1 e4       	ldi	r26, 0x41	; 65
 424:	b6 e0       	ldi	r27, 0x06	; 6
 426:	8c 91       	ld	r24, X
 428:	89 23       	and	r24, r25
 42a:	91 f0       	breq	.+36     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			if (!(kernel_data.delay_ctrs[i] = kernel_data.delay_ctrs[i] - 1))
 42c:	f9 01       	movw	r30, r18
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	ee 5b       	subi	r30, 0xBE	; 190
 434:	f9 4f       	sbci	r31, 0xF9	; 249
 436:	40 81       	ld	r20, Z
 438:	51 81       	ldd	r21, Z+1	; 0x01
 43a:	41 50       	subi	r20, 0x01	; 1
 43c:	51 09       	sbc	r21, r1
 43e:	51 83       	std	Z+1, r21	; 0x01
 440:	40 83       	st	Z, r20
 442:	45 2b       	or	r20, r21
 444:	29 f4       	brne	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			{
				// clear thread's delay bit if counter reached zero
				kernel_data.delay_status &= ~msk;
 446:	8c 91       	ld	r24, X
 448:	49 2f       	mov	r20, r25
 44a:	40 95       	com	r20
 44c:	84 23       	and	r24, r20
 44e:	8c 93       	st	X, r24
			}
		}
		msk <<= 1;
 450:	99 0f       	add	r25, r25
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 */
ISR(TIMER2_COMPA_vect)
{
	// check if each thread is delayed and decrement its counter if so
	uint8_t msk = 0x01;
	for (uint8_t i = 0; i < MAX_THREADS; ++i)
 456:	28 30       	cpi	r18, 0x08	; 8
 458:	31 05       	cpc	r19, r1
 45a:	29 f7       	brne	.-54     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}
		msk <<= 1;
	}
	
	// increment system time
	++kernel_data.system_time_millis;
 45c:	e4 e5       	ldi	r30, 0x54	; 84
 45e:	f6 e0       	ldi	r31, 0x06	; 6
 460:	80 81       	ld	r24, Z
 462:	91 81       	ldd	r25, Z+1	; 0x01
 464:	a2 81       	ldd	r26, Z+2	; 0x02
 466:	b3 81       	ldd	r27, Z+3	; 0x03
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	80 83       	st	Z, r24
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	a2 83       	std	Z+2, r26	; 0x02
 474:	b3 83       	std	Z+3, r27	; 0x03
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0b be       	out	0x3b, r0	; 59
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <init_system_timer>:
	uint8_t cs2 = 0b101;	// use clkt2s/128 prescaller
	uint8_t ocie2a = 0b1;	// enable compare match A interrupt
	uint8_t ocie2b = 0b0;	// disable compare match b interrupt
	uint8_t toie2 = 0b0;	// disable overflow interrupt
	
	TCCR2A = (com2a << COM2A0) | (com2b << COM2B0) | ((wgm2 & 0b11) << WGM20);
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
	TCCR2B = (foc2a << FOC2A) | (foc2b << FOC2B) | (((wgm2 & 0b100) >> 2) << WGM22) | (cs2 << CS20);
 49e:	95 e0       	ldi	r25, 0x05	; 5
 4a0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
	OCR2A = (F_CPU / 1000) / 128 - 1;
 4a4:	9c e7       	ldi	r25, 0x7C	; 124
 4a6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	TIMSK2 = (ocie2a << OCIE2A) | (ocie2b << OCIE2B) | (toie2 << TOIE2);
 4aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
	
	// set timer to zero
	kernel_data.system_time_millis = 0;
 4ae:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <__DATA_REGION_ORIGIN__+0x454>
 4b2:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <__DATA_REGION_ORIGIN__+0x455>
 4b6:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <__DATA_REGION_ORIGIN__+0x456>
 4ba:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <__DATA_REGION_ORIGIN__+0x457>
 4be:	08 95       	ret

000004c0 <sleep_mode>:
	sei();
}

void sleep_mode()
{
	sei();
 4c0:	78 94       	sei
	uint8_t sleep_mode_enable = 0b1;
	uint8_t sleep_mode_select = 0b111;
	SMCR |= (sleep_mode_select << SM0) | (sleep_mode_enable << SE);
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	8f 60       	ori	r24, 0x0F	; 15
 4c6:	83 bf       	out	0x33, r24	; 51
	asm volatile ("sleep");
 4c8:	88 95       	sleep
	cli();
 4ca:	f8 94       	cli
 4cc:	08 95       	ret

000004ce <schedule>:
}

// OS_main attribute blocks registers from being saved by gcc
void __attribute__ ((OS_main)) schedule()
{
		asm volatile ("push r2\n\
 4ce:	2f 92       	push	r2
 4d0:	3f 92       	push	r3
 4d2:	4f 92       	push	r4
 4d4:	5f 92       	push	r5
 4d6:	6f 92       	push	r6
 4d8:	7f 92       	push	r7
 4da:	8f 92       	push	r8
 4dc:	9f 92       	push	r9
 4de:	af 92       	push	r10
 4e0:	bf 92       	push	r11
 4e2:	cf 92       	push	r12
 4e4:	df 92       	push	r13
 4e6:	ef 92       	push	r14
 4e8:	ff 92       	push	r15
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
					   push r28\n\
					   push r29");
	
	
	uint8_t ready_status = 0x00;
	while (!(ready_status = ~(kernel_data.disable_status | kernel_data.delay_status)))
 4f2:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <__DATA_REGION_ORIGIN__+0x440>
 4f6:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <__DATA_REGION_ORIGIN__+0x441>
 4fa:	89 2b       	or	r24, r25
 4fc:	80 95       	com	r24
 4fe:	59 f4       	brne	.+22     	; 0x516 <schedule+0x48>
 500:	00 e4       	ldi	r16, 0x40	; 64
 502:	16 e0       	ldi	r17, 0x06	; 6
 504:	c1 e4       	ldi	r28, 0x41	; 65
 506:	d6 e0       	ldi	r29, 0x06	; 6
	{
		sleep_mode();
 508:	db df       	rcall	.-74     	; 0x4c0 <sleep_mode>
					   push r28\n\
					   push r29");
	
	
	uint8_t ready_status = 0x00;
	while (!(ready_status = ~(kernel_data.disable_status | kernel_data.delay_status)))
 50a:	f8 01       	movw	r30, r16
 50c:	90 81       	ld	r25, Z
 50e:	88 81       	ld	r24, Y
 510:	89 2b       	or	r24, r25
 512:	80 95       	com	r24
 514:	c9 f3       	breq	.-14     	; 0x508 <schedule+0x3a>
	{
		sleep_mode();
	}
	uint8_t tid = kernel_data.cur_thread_id;
 516:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <__DATA_REGION_ORIGIN__+0x452>
	uint8_t tmsk = kernel_data.cur_thread_mask;
 51a:	90 91 53 06 	lds	r25, 0x0653	; 0x800653 <__DATA_REGION_ORIGIN__+0x453>
	
	do
	{
		tid = (tid + 1) & 0x07;
 51e:	ef 5f       	subi	r30, 0xFF	; 255
 520:	e7 70       	andi	r30, 0x07	; 7
		asm volatile ("lsl %1\n"
 522:	99 0f       	add	r25, r25
 524:	91 1d       	adc	r25, r1
					  "adc %1, r1"
					  : "=r" (tmsk)
					  : "r" (tmsk));
	} while (!(ready_status & tmsk));
 526:	29 2f       	mov	r18, r25
 528:	28 23       	and	r18, r24
 52a:	c9 f3       	breq	.-14     	; 0x51e <schedule+0x50>
	
	kernel_data.cur_thread_id = tid;
 52c:	e0 93 52 06 	sts	0x0652, r30	; 0x800652 <__DATA_REGION_ORIGIN__+0x452>
	kernel_data.cur_thread_mask = tmsk;
 530:	90 93 53 06 	sts	0x0653, r25	; 0x800653 <__DATA_REGION_ORIGIN__+0x453>
	
	SP = (uint16_t) kernel_data.thread_ctrl_tbl[tid].stack_ptr;
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e0 50       	subi	r30, 0x00	; 0
 544:	fa 4f       	sbci	r31, 0xFA	; 250
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	9e bf       	out	0x3e, r25	; 62
 54c:	8d bf       	out	0x3d, r24	; 61
	
	asm volatile ("pop r29\n\
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	bf 90       	pop	r11
 560:	af 90       	pop	r10
 562:	9f 90       	pop	r9
 564:	8f 90       	pop	r8
 566:	7f 90       	pop	r7
 568:	6f 90       	pop	r6
 56a:	5f 90       	pop	r5
 56c:	4f 90       	pop	r4
 56e:	3f 90       	pop	r3
 570:	2f 90       	pop	r2
				   pop r6\n\
				   pop r5\n\
				   pop r4\n\
				   pop r3\n\
				   pop r2");
	sei();
 572:	78 94       	sei
 574:	08 95       	ret

00000576 <f0>:

void f2()
{
	while(1)
	{
		delay(7);
 576:	10 e8       	ldi	r17, 0x80	; 128
 578:	14 b9       	out	0x04, r17	; 4
 57a:	c4 e1       	ldi	r28, 0x14	; 20
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	2f 9a       	sbi	0x05, 7	; 5
 580:	88 ec       	ldi	r24, 0xC8	; 200
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	a4 de       	rcall	.-696    	; 0x2ce <delay>
 586:	2f 98       	cbi	0x05, 7	; 5
 588:	82 e3       	ldi	r24, 0x32	; 50
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	a0 de       	rcall	.-704    	; 0x2ce <delay>
 58e:	21 97       	sbiw	r28, 0x01	; 1
 590:	b1 f7       	brne	.-20     	; 0x57e <f0+0x8>
 592:	80 e1       	ldi	r24, 0x10	; 16
 594:	97 e2       	ldi	r25, 0x27	; 39
 596:	9b de       	rcall	.-714    	; 0x2ce <delay>
 598:	ef cf       	rjmp	.-34     	; 0x578 <f0+0x2>

0000059a <main>:
	}
}

int main(void)
{
    init();
 59a:	d4 dd       	rcall	.-1112   	; 0x144 <init>
	
	new(0, f0, true);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	6b eb       	ldi	r22, 0xBB	; 187
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	b7 de       	rcall	.-658    	; 0x314 <new>
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <main+0xc>

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
