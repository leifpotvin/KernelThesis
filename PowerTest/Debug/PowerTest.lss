
PowerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800200  00000930  000009c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008003cc  008003cc  00000b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d2f  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb2  00000000  00000000  00002a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3a  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f5  00000000  00000000  000049e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0f  00000000  00000000  000050d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e3       	ldi	r30, 0x30	; 48
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3c       	cpi	r26, 0xCC	; 204
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac ec       	ldi	r26, 0xCC	; 204
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 3d       	cpi	r26, 0xD1	; 209
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	74 d1       	rcall	.+744    	; 0x408 <main>
 120:	05 c4       	rjmp	.+2058   	; 0x92c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <print_c>:
	}
}

void print_c(char c)
{
	PSerial_writew(0, c);
 124:	68 2f       	mov	r22, r24
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	ab c3       	rjmp	.+1878   	; 0x880 <PSerial_writew>
 12a:	08 95       	ret

0000012c <print_s>:
}

void print_s(char *str)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
	while (*str != 0x00)
 132:	88 81       	ld	r24, Y
 134:	88 23       	and	r24, r24
 136:	29 f0       	breq	.+10     	; 0x142 <print_s+0x16>
 138:	21 96       	adiw	r28, 0x01	; 1
	{
		print_c(*str);
 13a:	f4 df       	rcall	.-24     	; 0x124 <print_c>
	PSerial_writew(0, c);
}

void print_s(char *str)
{
	while (*str != 0x00)
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	fc cf       	rjmp	.-8      	; 0x13a <print_s+0xe>
	{
		print_c(*str);
		++str;
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <no_sleep>:
/*
 *	fucntions to execute each sleep mode
 */
void no_sleep()
{
	while(sleeping);
 148:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
 14c:	81 11       	cpse	r24, r1
 14e:	fc cf       	rjmp	.-8      	; 0x148 <no_sleep>
}
 150:	08 95       	ret

00000152 <idle>:

void idle()
{
	SMCR |= 0b000<<SM0;
 152:	83 b7       	in	r24, 0x33	; 51
 154:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 156:	83 b7       	in	r24, 0x33	; 51
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 15c:	88 95       	sleep
 15e:	08 95       	ret

00000160 <adcnrm>:
}

void adcnrm()
{
	SMCR |= 0b001<<SM0;
 160:	83 b7       	in	r24, 0x33	; 51
 162:	82 60       	ori	r24, 0x02	; 2
 164:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 166:	83 b7       	in	r24, 0x33	; 51
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 16c:	88 95       	sleep
 16e:	08 95       	ret

00000170 <power_down>:
}

void power_down()
{
	SMCR |= 0b010<<SM0;
 170:	83 b7       	in	r24, 0x33	; 51
 172:	84 60       	ori	r24, 0x04	; 4
 174:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 176:	83 b7       	in	r24, 0x33	; 51
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 17c:	88 95       	sleep
 17e:	08 95       	ret

00000180 <power_save>:
}

void power_save()
{
	SMCR |= 0b011<<SM0;
 180:	83 b7       	in	r24, 0x33	; 51
 182:	86 60       	ori	r24, 0x06	; 6
 184:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 186:	83 b7       	in	r24, 0x33	; 51
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 18c:	88 95       	sleep
 18e:	08 95       	ret

00000190 <standby>:
}

void standby()
{
	SMCR |= 0b110<<SM0;
 190:	83 b7       	in	r24, 0x33	; 51
 192:	8c 60       	ori	r24, 0x0C	; 12
 194:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 196:	83 b7       	in	r24, 0x33	; 51
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 19c:	88 95       	sleep
 19e:	08 95       	ret

000001a0 <ext_standby>:
}

void ext_standby()
{
	SMCR |= 0b111<<SM0;
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	8e 60       	ori	r24, 0x0E	; 14
 1a4:	83 bf       	out	0x33, r24	; 51
	SMCR |= 0b1<<SE;
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	83 bf       	out	0x33, r24	; 51
	__asm__("sleep");
 1ac:	88 95       	sleep
 1ae:	08 95       	ret

000001b0 <__vector_1>:

/*
 *	end the sleep on the button press
 */
ISR(INT0_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
	sleeping = false;
 1ba:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
}
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <disable_modules>:
/*
 *	disable modules by setting PRR according to the module_disable_vect
 */
void disable_modules()
{
	PRR0 = (uint8_t) (module_disable_vect & 0x00ff);
 1c8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 1cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
	PRR1 = (uint8_t) ((module_disable_vect >> 8) & 0x00ff);
 1d0:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 1d4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>
 1d8:	08 95       	ret

000001da <enable_modules>:
/*
 *	enable all modules in the PRR register
 */
void enable_modules()
{
	PRR0 = 0x00;
 1da:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
	PRR1 = 0x00;
 1de:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>
 1e2:	08 95       	ret

000001e4 <reset>:
/*
 *	reset the state
 */
void reset()
{
	PSerial_open(0, 9600, SERIAL_8E2);
 1e4:	2e e2       	ldi	r18, 0x2E	; 46
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e8       	ldi	r20, 0x80	; 128
 1ea:	55 e2       	ldi	r21, 0x25	; 37
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	20 d2       	rcall	.+1088   	; 0x634 <PSerial_open>
	sleep_mode = no_sleep;
 1f4:	84 ea       	ldi	r24, 0xA4	; 164
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <sleep_mode+0x1>
 1fc:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <sleep_mode>
	module_disable_vect = 0x0000;
 200:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <module_disable_vect+0x1>
 204:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <module_disable_vect>
	enable_modules();
 208:	e8 df       	rcall	.-48     	; 0x1da <enable_modules>
	
	DDRD &= ~(0x01);
 20a:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= 0x01;
 20c:	58 9a       	sbi	0x0b, 0	; 11
	
	uint8_t isc0 = 0b10;
	EICRA = (isc0 << ISC00);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	EIMSK = (0b1 << INT0) | (0b1 << INT0);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 218:	78 94       	sei
 21a:	08 95       	ret

0000021c <print_state>:
/*
 *	print the current sleep configuration to the terminal
 */
void print_state()
{
	print_s("Modules:");
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	85 df       	rcall	.-246    	; 0x12c <print_s>
	
	print_s("\n\r    TIM0    :    ");
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	82 df       	rcall	.-252    	; 0x12c <print_s>
	module_disable_vect & TIM0 ? print_c('d') : print_c('e');
 228:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 22c:	85 ff       	sbrs	r24, 5
 22e:	03 c0       	rjmp	.+6      	; 0x236 <print_state+0x1a>
 230:	84 e6       	ldi	r24, 0x64	; 100
 232:	78 df       	rcall	.-272    	; 0x124 <print_c>
 234:	02 c0       	rjmp	.+4      	; 0x23a <print_state+0x1e>
 236:	85 e6       	ldi	r24, 0x65	; 101
	print_s("\n\r    TIM1    :    ");
 238:	75 df       	rcall	.-278    	; 0x124 <print_c>
 23a:	87 e4       	ldi	r24, 0x47	; 71
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	76 df       	rcall	.-276    	; 0x12c <print_s>
	module_disable_vect & TIM1 ? print_c('d') : print_c('e');
 240:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 244:	83 ff       	sbrs	r24, 3
 246:	03 c0       	rjmp	.+6      	; 0x24e <print_state+0x32>
 248:	84 e6       	ldi	r24, 0x64	; 100
 24a:	6c df       	rcall	.-296    	; 0x124 <print_c>
 24c:	02 c0       	rjmp	.+4      	; 0x252 <print_state+0x36>
 24e:	85 e6       	ldi	r24, 0x65	; 101
 250:	69 df       	rcall	.-302    	; 0x124 <print_c>
	print_s("\n\r    TIM2    :    ");
 252:	8b e5       	ldi	r24, 0x5B	; 91
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	6a df       	rcall	.-300    	; 0x12c <print_s>
	module_disable_vect & TIM2 ? print_c('d') : print_c('e');
 258:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 25c:	86 ff       	sbrs	r24, 6
 25e:	03 c0       	rjmp	.+6      	; 0x266 <print_state+0x4a>
 260:	84 e6       	ldi	r24, 0x64	; 100
 262:	60 df       	rcall	.-320    	; 0x124 <print_c>
 264:	02 c0       	rjmp	.+4      	; 0x26a <print_state+0x4e>
 266:	85 e6       	ldi	r24, 0x65	; 101
 268:	5d df       	rcall	.-326    	; 0x124 <print_c>
 26a:	8f e6       	ldi	r24, 0x6F	; 111
	print_s("\n\r    TIM3    :    ");
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	5e df       	rcall	.-324    	; 0x12c <print_s>
 270:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & TIM3 ? print_c('d') : print_c('e');
 274:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 278:	93 ff       	sbrs	r25, 3
 27a:	03 c0       	rjmp	.+6      	; 0x282 <print_state+0x66>
 27c:	84 e6       	ldi	r24, 0x64	; 100
 27e:	52 df       	rcall	.-348    	; 0x124 <print_c>
 280:	02 c0       	rjmp	.+4      	; 0x286 <print_state+0x6a>
 282:	85 e6       	ldi	r24, 0x65	; 101
 284:	4f df       	rcall	.-354    	; 0x124 <print_c>
 286:	83 e8       	ldi	r24, 0x83	; 131
	print_s("\n\r    TIM4    :    ");
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	50 df       	rcall	.-352    	; 0x12c <print_s>
 28c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & TIM4 ? print_c('d') : print_c('e');
 290:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 294:	94 ff       	sbrs	r25, 4
 296:	03 c0       	rjmp	.+6      	; 0x29e <print_state+0x82>
 298:	84 e6       	ldi	r24, 0x64	; 100
 29a:	44 df       	rcall	.-376    	; 0x124 <print_c>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <print_state+0x86>
 29e:	85 e6       	ldi	r24, 0x65	; 101
 2a0:	41 df       	rcall	.-382    	; 0x124 <print_c>
 2a2:	87 e9       	ldi	r24, 0x97	; 151
	print_s("\n\r    TIM5    :    ");
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	42 df       	rcall	.-380    	; 0x12c <print_s>
 2a8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & TIM5 ? print_c('d') : print_c('e');
 2ac:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 2b0:	95 ff       	sbrs	r25, 5
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <print_state+0x9e>
 2b4:	84 e6       	ldi	r24, 0x64	; 100
 2b6:	36 df       	rcall	.-404    	; 0x124 <print_c>
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <print_state+0xa2>
 2ba:	85 e6       	ldi	r24, 0x65	; 101
 2bc:	33 df       	rcall	.-410    	; 0x124 <print_c>
 2be:	8b ea       	ldi	r24, 0xAB	; 171
	print_s("\n\r    USART0  :    ");
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	34 df       	rcall	.-408    	; 0x12c <print_s>
 2c4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & USART0 ? print_c('d') : print_c('e');
 2c8:	81 ff       	sbrs	r24, 1
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <print_state+0xb6>
 2cc:	84 e6       	ldi	r24, 0x64	; 100
 2ce:	2a df       	rcall	.-428    	; 0x124 <print_c>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <print_state+0xba>
 2d2:	85 e6       	ldi	r24, 0x65	; 101
 2d4:	27 df       	rcall	.-434    	; 0x124 <print_c>
 2d6:	8f eb       	ldi	r24, 0xBF	; 191
	print_s("\n\r    USART1  :    ");
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	28 df       	rcall	.-432    	; 0x12c <print_s>
 2dc:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & USART1 ? print_c('d') : print_c('e');
 2e0:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 2e4:	90 ff       	sbrs	r25, 0
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <print_state+0xd2>
 2e8:	84 e6       	ldi	r24, 0x64	; 100
 2ea:	1c df       	rcall	.-456    	; 0x124 <print_c>
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <print_state+0xd6>
 2ee:	85 e6       	ldi	r24, 0x65	; 101
 2f0:	19 df       	rcall	.-462    	; 0x124 <print_c>
	print_s("\n\r    USART2  :    ");
 2f2:	83 ed       	ldi	r24, 0xD3	; 211
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	1a df       	rcall	.-460    	; 0x12c <print_s>
	module_disable_vect & USART2 ? print_c('d') : print_c('e');
 2f8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 2fc:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 300:	91 ff       	sbrs	r25, 1
 302:	03 c0       	rjmp	.+6      	; 0x30a <print_state+0xee>
 304:	84 e6       	ldi	r24, 0x64	; 100
 306:	0e df       	rcall	.-484    	; 0x124 <print_c>
 308:	02 c0       	rjmp	.+4      	; 0x30e <print_state+0xf2>
 30a:	85 e6       	ldi	r24, 0x65	; 101
	print_s("\n\r    USART3  :    ");
 30c:	0b df       	rcall	.-490    	; 0x124 <print_c>
 30e:	87 ee       	ldi	r24, 0xE7	; 231
 310:	92 e0       	ldi	r25, 0x02	; 2
	module_disable_vect & USART3 ? print_c('d') : print_c('e');
 312:	0c df       	rcall	.-488    	; 0x12c <print_s>
 314:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 318:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <module_disable_vect+0x1>
 31c:	92 ff       	sbrs	r25, 2
 31e:	03 c0       	rjmp	.+6      	; 0x326 <print_state+0x10a>
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	00 df       	rcall	.-512    	; 0x124 <print_c>
 324:	02 c0       	rjmp	.+4      	; 0x32a <print_state+0x10e>
 326:	85 e6       	ldi	r24, 0x65	; 101
	print_s("\n\r    ADC_    :    ");
 328:	fd de       	rcall	.-518    	; 0x124 <print_c>
 32a:	8b ef       	ldi	r24, 0xFB	; 251
 32c:	92 e0       	ldi	r25, 0x02	; 2
	module_disable_vect & ADC_ ? print_c('d') : print_c('e');
 32e:	fe de       	rcall	.-516    	; 0x12c <print_s>
 330:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 334:	80 ff       	sbrs	r24, 0
 336:	03 c0       	rjmp	.+6      	; 0x33e <print_state+0x122>
 338:	84 e6       	ldi	r24, 0x64	; 100
 33a:	f4 de       	rcall	.-536    	; 0x124 <print_c>
 33c:	02 c0       	rjmp	.+4      	; 0x342 <print_state+0x126>
 33e:	85 e6       	ldi	r24, 0x65	; 101
	print_s("\n\r    SPI     :    ");
 340:	f1 de       	rcall	.-542    	; 0x124 <print_c>
 342:	8f e0       	ldi	r24, 0x0F	; 15
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	f2 de       	rcall	.-540    	; 0x12c <print_s>
	module_disable_vect & SPI ? print_c('d') : print_c('e');
 348:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
 34c:	82 ff       	sbrs	r24, 2
 34e:	03 c0       	rjmp	.+6      	; 0x356 <print_state+0x13a>
 350:	84 e6       	ldi	r24, 0x64	; 100
 352:	e8 de       	rcall	.-560    	; 0x124 <print_c>
 354:	02 c0       	rjmp	.+4      	; 0x35a <print_state+0x13e>
 356:	85 e6       	ldi	r24, 0x65	; 101
 358:	e5 de       	rcall	.-566    	; 0x124 <print_c>
 35a:	83 e2       	ldi	r24, 0x23	; 35
	print_s("\n\r    TWI     :    ");
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	e6 de       	rcall	.-564    	; 0x12c <print_s>
 360:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <module_disable_vect>
	module_disable_vect & TWI ? print_c('d') : print_c('e');
 364:	87 ff       	sbrs	r24, 7
 366:	03 c0       	rjmp	.+6      	; 0x36e <print_state+0x152>
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	dc de       	rcall	.-584    	; 0x124 <print_c>
 36c:	02 c0       	rjmp	.+4      	; 0x372 <print_state+0x156>
 36e:	85 e6       	ldi	r24, 0x65	; 101
 370:	d9 de       	rcall	.-590    	; 0x124 <print_c>
 372:	82 e4       	ldi	r24, 0x42	; 66
 374:	93 e0       	ldi	r25, 0x03	; 3
	print_s("\n\r");
 376:	da de       	rcall	.-588    	; 0x12c <print_s>
 378:	87 e3       	ldi	r24, 0x37	; 55
 37a:	93 e0       	ldi	r25, 0x03	; 3
	
	print_s("Sleep mode:\n\r");
 37c:	d7 de       	rcall	.-594    	; 0x12c <print_s>
 37e:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <sleep_mode>
 382:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <sleep_mode+0x1>
	if (sleep_mode == no_sleep)
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	84 3a       	cpi	r24, 0xA4	; 164
 38a:	92 07       	cpc	r25, r18
 38c:	31 f4       	brne	.+12     	; 0x39a <print_state+0x17e>
 38e:	85 e4       	ldi	r24, 0x45	; 69
 390:	93 e0       	ldi	r25, 0x03	; 3
	{
		print_s("    no_sleep\n\r");
 392:	cc de       	rcall	.-616    	; 0x12c <print_s>
 394:	e0 ec       	ldi	r30, 0xC0	; 192
 396:	f0 e0       	ldi	r31, 0x00	; 0
	else
	{
		print_s("    Not a valid sleep_mode\n\r");
	}
	
	while (!(UCSR0A & (1<<TXC0)));
 398:	33 c0       	rjmp	.+102    	; 0x400 <__LOCK_REGION_LENGTH__>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	89 3a       	cpi	r24, 0xA9	; 169
	print_s("Sleep mode:\n\r");
	if (sleep_mode == no_sleep)
	{
		print_s("    no_sleep\n\r");
	}
	else if (sleep_mode == idle)
 39e:	92 07       	cpc	r25, r18
 3a0:	21 f4       	brne	.+8      	; 0x3aa <print_state+0x18e>
 3a2:	84 e5       	ldi	r24, 0x54	; 84
	{
		print_s("    idle\n\r");
 3a4:	93 e0       	ldi	r25, 0x03	; 3
 3a6:	c2 de       	rcall	.-636    	; 0x12c <print_s>
 3a8:	f5 cf       	rjmp	.-22     	; 0x394 <print_state+0x178>
 3aa:	20 e0       	ldi	r18, 0x00	; 0
	}
	else if (sleep_mode == adcnrm)
 3ac:	80 3b       	cpi	r24, 0xB0	; 176
 3ae:	92 07       	cpc	r25, r18
 3b0:	21 f4       	brne	.+8      	; 0x3ba <print_state+0x19e>
 3b2:	8f e5       	ldi	r24, 0x5F	; 95
	{
		print_s("    adcnrm\n\r");
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	ba de       	rcall	.-652    	; 0x12c <print_s>
 3b8:	ed cf       	rjmp	.-38     	; 0x394 <print_state+0x178>
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	88 3b       	cpi	r24, 0xB8	; 184
	}
	else if (sleep_mode == power_down)
 3be:	92 07       	cpc	r25, r18
 3c0:	21 f4       	brne	.+8      	; 0x3ca <print_state+0x1ae>
 3c2:	8c e6       	ldi	r24, 0x6C	; 108
 3c4:	93 e0       	ldi	r25, 0x03	; 3
	{
		print_s("    power_down\n\r");
 3c6:	b2 de       	rcall	.-668    	; 0x12c <print_s>
 3c8:	e5 cf       	rjmp	.-54     	; 0x394 <print_state+0x178>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	80 3c       	cpi	r24, 0xC0	; 192
 3ce:	92 07       	cpc	r25, r18
	}
	else if (sleep_mode == power_save)
 3d0:	21 f4       	brne	.+8      	; 0x3da <print_state+0x1be>
 3d2:	8d e7       	ldi	r24, 0x7D	; 125
 3d4:	93 e0       	ldi	r25, 0x03	; 3
 3d6:	aa de       	rcall	.-684    	; 0x12c <print_s>
	{
		print_s("    power_save\n\r");
 3d8:	dd cf       	rjmp	.-70     	; 0x394 <print_state+0x178>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	88 3c       	cpi	r24, 0xC8	; 200
 3de:	92 07       	cpc	r25, r18
 3e0:	21 f4       	brne	.+8      	; 0x3ea <print_state+0x1ce>
	}
	else if ( sleep_mode == standby)
 3e2:	8e e8       	ldi	r24, 0x8E	; 142
 3e4:	93 e0       	ldi	r25, 0x03	; 3
 3e6:	a2 de       	rcall	.-700    	; 0x12c <print_s>
 3e8:	d5 cf       	rjmp	.-86     	; 0x394 <print_state+0x178>
	{
		print_s("    standby\n\r");
 3ea:	80 5d       	subi	r24, 0xD0	; 208
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <print_state+0x1dc>
 3f0:	8c e9       	ldi	r24, 0x9C	; 156
 3f2:	93 e0       	ldi	r25, 0x03	; 3
	}
	else if (sleep_mode == ext_standby)
 3f4:	9b de       	rcall	.-714    	; 0x12c <print_s>
 3f6:	ce cf       	rjmp	.-100    	; 0x394 <print_state+0x178>
 3f8:	8e ea       	ldi	r24, 0xAE	; 174
	{
		print_s("    ext_standby\n\r");
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	97 de       	rcall	.-722    	; 0x12c <print_s>
 3fe:	ca cf       	rjmp	.-108    	; 0x394 <print_state+0x178>
 400:	80 81       	ld	r24, Z
 402:	86 ff       	sbrs	r24, 6
	}
	else
	{
		print_s("    Not a valid sleep_mode\n\r");
 404:	fd cf       	rjmp	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
 406:	08 95       	ret

00000408 <main>:
 408:	5f 92       	push	r5
 40a:	6f 92       	push	r6
 40c:	7f 92       	push	r7
	}
	
	while (!(UCSR0A & (1<<TXC0)));
 40e:	8f 92       	push	r8
 410:	9f 92       	push	r9
 412:	af 92       	push	r10
}
 414:	bf 92       	push	r11


int main()
{
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	0f 2e       	mov	r0, r31
 428:	fc e1       	ldi	r31, 0x1C	; 28
 42a:	cf 2e       	mov	r12, r31
 42c:	f2 e0       	ldi	r31, 0x02	; 2
 42e:	df 2e       	mov	r13, r31
 430:	f0 2d       	mov	r31, r0
 432:	0f 2e       	mov	r0, r31
 434:	fa e2       	ldi	r31, 0x2A	; 42
 436:	8f 2e       	mov	r8, r31
 438:	f2 e0       	ldi	r31, 0x02	; 2
 43a:	9f 2e       	mov	r9, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	0f 2e       	mov	r0, r31
 440:	fc e1       	ldi	r31, 0x1C	; 28
 442:	af 2e       	mov	r10, r31
 444:	f2 e0       	ldi	r31, 0x02	; 2
 446:	bf 2e       	mov	r11, r31
 448:	f0 2d       	mov	r31, r0
			reset();
			sleep_mode = sleep_modes[i];
			module_disable_vect = modules[j];
			print_state();
			disable_modules();
			sleeping = true;
 44a:	77 24       	eor	r7, r7
 44c:	73 94       	inc	r7
			sleep_mode();
		}
		
		reset();
		sleep_mode = sleep_modes[i];
		module_disable_vect = modules[1] | modules[2] | modules[3] 
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d2 e0       	ldi	r29, 0x02	; 2
 452:	b9 c0       	rjmp	.+370    	; 0x5c6 <main+0x1be>
{
	for (int i = 0; i < 7; ++i)
	{
		for (int j = 0; j < 14; ++j)
		{
			reset();
 454:	c7 de       	rcall	.-626    	; 0x1e4 <reset>
 456:	e5 2c       	mov	r14, r5
 458:	f6 2c       	mov	r15, r6
			sleep_mode = sleep_modes[i];
 45a:	f6 01       	movw	r30, r12
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <sleep_mode+0x1>
 464:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <sleep_mode>
			module_disable_vect = modules[j];
 468:	f8 01       	movw	r30, r16
 46a:	81 91       	ld	r24, Z+
 46c:	91 91       	ld	r25, Z+
 46e:	8f 01       	movw	r16, r30
 470:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <module_disable_vect+0x1>
 474:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <module_disable_vect>
			print_state();
			disable_modules();
 478:	d1 de       	rcall	.-606    	; 0x21c <print_state>
 47a:	a6 de       	rcall	.-692    	; 0x1c8 <disable_modules>
			sleeping = true;
 47c:	70 92 cc 03 	sts	0x03CC, r7	; 0x8003cc <__data_end>
			sleep_mode();
 480:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <sleep_mode>
 484:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <sleep_mode+0x1>
 488:	19 95       	eicall

int main()
{
	for (int i = 0; i < 7; ++i)
	{
		for (int j = 0; j < 14; ++j)
 48a:	a0 16       	cp	r10, r16
 48c:	b1 06       	cpc	r11, r17
			disable_modules();
			sleeping = true;
			sleep_mode();
		}
		
		reset();
 48e:	11 f7       	brne	.-60     	; 0x454 <main+0x4c>
 490:	a9 de       	rcall	.-686    	; 0x1e4 <reset>
		sleep_mode = sleep_modes[i];
 492:	f7 01       	movw	r30, r14
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <sleep_mode+0x1>
 49c:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <sleep_mode>
		module_disable_vect = modules[1] | modules[2] | modules[3] 
 4a0:	2a 81       	ldd	r18, Y+2	; 0x02
 4a2:	3b 81       	ldd	r19, Y+3	; 0x03
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	9d 81       	ldd	r25, Y+5	; 0x05
 4a8:	82 2b       	or	r24, r18
 4aa:	93 2b       	or	r25, r19
 4ac:	2e 81       	ldd	r18, Y+6	; 0x06
 4ae:	3f 81       	ldd	r19, Y+7	; 0x07
 4b0:	82 2b       	or	r24, r18
 4b2:	93 2b       	or	r25, r19
 4b4:	28 85       	ldd	r18, Y+8	; 0x08
 4b6:	39 85       	ldd	r19, Y+9	; 0x09
 4b8:	82 2b       	or	r24, r18
 4ba:	93 2b       	or	r25, r19
 4bc:	2a 85       	ldd	r18, Y+10	; 0x0a
 4be:	3b 85       	ldd	r19, Y+11	; 0x0b
 4c0:	82 2b       	or	r24, r18
 4c2:	93 2b       	or	r25, r19
 4c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 4c6:	3d 85       	ldd	r19, Y+13	; 0x0d
 4c8:	82 2b       	or	r24, r18
 4ca:	93 2b       	or	r25, r19
 4cc:	2e 85       	ldd	r18, Y+14	; 0x0e
 4ce:	3f 85       	ldd	r19, Y+15	; 0x0f
 4d0:	82 2b       	or	r24, r18
 4d2:	93 2b       	or	r25, r19
 4d4:	28 89       	ldd	r18, Y+16	; 0x10
 4d6:	39 89       	ldd	r19, Y+17	; 0x11
 4d8:	82 2b       	or	r24, r18
 4da:	93 2b       	or	r25, r19
 4dc:	2a 89       	ldd	r18, Y+18	; 0x12
 4de:	3b 89       	ldd	r19, Y+19	; 0x13
 4e0:	82 2b       	or	r24, r18
 4e2:	93 2b       	or	r25, r19
 4e4:	2c 89       	ldd	r18, Y+20	; 0x14
 4e6:	3d 89       	ldd	r19, Y+21	; 0x15
 4e8:	82 2b       	or	r24, r18
 4ea:	93 2b       	or	r25, r19
 4ec:	2e 89       	ldd	r18, Y+22	; 0x16
 4ee:	3f 89       	ldd	r19, Y+23	; 0x17
 4f0:	82 2b       	or	r24, r18
 4f2:	93 2b       	or	r25, r19
 4f4:	28 8d       	ldd	r18, Y+24	; 0x18
 4f6:	39 8d       	ldd	r19, Y+25	; 0x19
 4f8:	82 2b       	or	r24, r18
 4fa:	93 2b       	or	r25, r19
 4fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
 4fe:	3b 8d       	ldd	r19, Y+27	; 0x1b
 500:	82 2b       	or	r24, r18
 502:	93 2b       	or	r25, r19
 504:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <module_disable_vect+0x1>
						    | modules[4] | modules[5] | modules[6] 
							| modules[7] | modules[8] | modules[9] 
							| modules[10] | modules[11] | modules[12] 
							| modules[13];
		print_state();
 508:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <module_disable_vect>
		disable_modules();
 50c:	87 de       	rcall	.-754    	; 0x21c <print_state>
 50e:	5c de       	rcall	.-840    	; 0x1c8 <disable_modules>
		sleeping = true;
 510:	70 92 cc 03 	sts	0x03CC, r7	; 0x8003cc <__data_end>
		sleep_mode();
 514:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <sleep_mode>
 518:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <sleep_mode+0x1>
		
		reset();
 51c:	19 95       	eicall
 51e:	62 de       	rcall	.-828    	; 0x1e4 <reset>
		sleep_mode = sleep_modes[i];
 520:	f7 01       	movw	r30, r14
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <sleep_mode+0x1>
 52a:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <sleep_mode>
		module_disable_vect = modules[1] | modules[2] | modules[3] | modules[4] 
 52e:	2a 81       	ldd	r18, Y+2	; 0x02
 530:	3b 81       	ldd	r19, Y+3	; 0x03
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	9d 81       	ldd	r25, Y+5	; 0x05
 536:	82 2b       	or	r24, r18
 538:	93 2b       	or	r25, r19
 53a:	2e 81       	ldd	r18, Y+6	; 0x06
 53c:	3f 81       	ldd	r19, Y+7	; 0x07
 53e:	82 2b       	or	r24, r18
 540:	93 2b       	or	r25, r19
 542:	28 85       	ldd	r18, Y+8	; 0x08
 544:	39 85       	ldd	r19, Y+9	; 0x09
 546:	82 2b       	or	r24, r18
 548:	93 2b       	or	r25, r19
 54a:	2a 85       	ldd	r18, Y+10	; 0x0a
 54c:	3b 85       	ldd	r19, Y+11	; 0x0b
 54e:	82 2b       	or	r24, r18
 550:	93 2b       	or	r25, r19
 552:	2c 85       	ldd	r18, Y+12	; 0x0c
 554:	3d 85       	ldd	r19, Y+13	; 0x0d
 556:	82 2b       	or	r24, r18
 558:	93 2b       	or	r25, r19
 55a:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <module_disable_vect+0x1>
							| modules[5] | modules[6];
		print_state();
 55e:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <module_disable_vect>
		disable_modules();
 562:	5c de       	rcall	.-840    	; 0x21c <print_state>
		sleeping = true;
 564:	31 de       	rcall	.-926    	; 0x1c8 <disable_modules>
 566:	70 92 cc 03 	sts	0x03CC, r7	; 0x8003cc <__data_end>
		sleep_mode();
 56a:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <sleep_mode>
 56e:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <sleep_mode+0x1>
		
		reset();
 572:	19 95       	eicall
 574:	37 de       	rcall	.-914    	; 0x1e4 <reset>
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	cf 0e       	add	r12, r31
 57a:	d1 1c       	adc	r13, r1
		sleep_mode = sleep_modes[i];
 57c:	f7 01       	movw	r30, r14
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <sleep_mode+0x1>
 586:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <sleep_mode>
		module_disable_vect = modules[7] | modules[8] | modules[9] | modules[10];
 58a:	2e 85       	ldd	r18, Y+14	; 0x0e
 58c:	3f 85       	ldd	r19, Y+15	; 0x0f
 58e:	88 89       	ldd	r24, Y+16	; 0x10
 590:	99 89       	ldd	r25, Y+17	; 0x11
 592:	82 2b       	or	r24, r18
 594:	93 2b       	or	r25, r19
 596:	2a 89       	ldd	r18, Y+18	; 0x12
 598:	3b 89       	ldd	r19, Y+19	; 0x13
 59a:	82 2b       	or	r24, r18
 59c:	93 2b       	or	r25, r19
 59e:	2c 89       	ldd	r18, Y+20	; 0x14
 5a0:	3d 89       	ldd	r19, Y+21	; 0x15
 5a2:	82 2b       	or	r24, r18
 5a4:	93 2b       	or	r25, r19
 5a6:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <module_disable_vect+0x1>
		print_state();
 5aa:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <module_disable_vect>
		disable_modules();
 5ae:	36 de       	rcall	.-916    	; 0x21c <print_state>
 5b0:	0b de       	rcall	.-1002   	; 0x1c8 <disable_modules>
		sleeping = true;
 5b2:	70 92 cc 03 	sts	0x03CC, r7	; 0x8003cc <__data_end>
		sleep_mode();
 5b6:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <sleep_mode>
 5ba:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <sleep_mode+0x1>
 5be:	19 95       	eicall
}


int main()
{
	for (int i = 0; i < 7; ++i)
 5c0:	c8 14       	cp	r12, r8
 5c2:	d9 04       	cpc	r13, r9
 5c4:	29 f0       	breq	.+10     	; 0x5d0 <main+0x1c8>
 5c6:	00 e0       	ldi	r16, 0x00	; 0
 5c8:	12 e0       	ldi	r17, 0x02	; 2
 5ca:	5c 2c       	mov	r5, r12
 5cc:	6d 2c       	mov	r6, r13
 5ce:	42 cf       	rjmp	.-380    	; 0x454 <main+0x4c>
		print_state();
		disable_modules();
		sleeping = true;
		sleep_mode();
	}
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	df 90       	pop	r13
 5e2:	cf 90       	pop	r12
 5e4:	bf 90       	pop	r11
 5e6:	af 90       	pop	r10
 5e8:	9f 90       	pop	r9
 5ea:	8f 90       	pop	r8
 5ec:	7f 90       	pop	r7
 5ee:	6f 90       	pop	r6
 5f0:	5f 90       	pop	r5
 5f2:	08 95       	ret

000005f4 <get_port>:
	else
	{
		PORTn->UDRn = data;
		return 0;
	}
}
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	61 f0       	breq	.+24     	; 0x610 <get_port+0x1c>
 5f8:	28 f0       	brcs	.+10     	; 0x604 <get_port+0x10>
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	79 f0       	breq	.+30     	; 0x61c <get_port+0x28>
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	99 f0       	breq	.+38     	; 0x628 <get_port+0x34>
 602:	08 95       	ret
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	fb 01       	movw	r30, r22
 60a:	91 83       	std	Z+1, r25	; 0x01
 60c:	80 83       	st	Z, r24
 60e:	08 95       	ret
 610:	88 ec       	ldi	r24, 0xC8	; 200
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	fb 01       	movw	r30, r22
 616:	91 83       	std	Z+1, r25	; 0x01
 618:	80 83       	st	Z, r24
 61a:	08 95       	ret
 61c:	80 ed       	ldi	r24, 0xD0	; 208
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fb 01       	movw	r30, r22
 622:	91 83       	std	Z+1, r25	; 0x01
 624:	80 83       	st	Z, r24
 626:	08 95       	ret
 628:	80 e3       	ldi	r24, 0x30	; 48
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	fb 01       	movw	r30, r22
 62e:	91 83       	std	Z+1, r25	; 0x01
 630:	80 83       	st	Z, r24
 632:	08 95       	ret

00000634 <PSerial_open>:
 634:	af 92       	push	r10
 636:	bf 92       	push	r11
 638:	cf 92       	push	r12
 63a:	df 92       	push	r13
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	1f 92       	push	r1
 648:	1f 92       	push	r1
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
 64e:	6a 01       	movw	r12, r20
 650:	7b 01       	movw	r14, r22
 652:	12 2f       	mov	r17, r18
 654:	be 01       	movw	r22, r28
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	cc df       	rcall	.-104    	; 0x5f4 <get_port>
 65c:	c1 14       	cp	r12, r1
 65e:	86 e9       	ldi	r24, 0x96	; 150
 660:	d8 06       	cpc	r13, r24
 662:	e1 04       	cpc	r14, r1
 664:	f1 04       	cpc	r15, r1
 666:	09 f4       	brne	.+2      	; 0x66a <PSerial_open+0x36>
 668:	9a c0       	rjmp	.+308    	; 0x79e <PSerial_open+0x16a>
 66a:	94 f5       	brge	.+100    	; 0x6d0 <PSerial_open+0x9c>
 66c:	f0 e8       	ldi	r31, 0x80	; 128
 66e:	cf 16       	cp	r12, r31
 670:	f5 e2       	ldi	r31, 0x25	; 37
 672:	df 06       	cpc	r13, r31
 674:	e1 04       	cpc	r14, r1
 676:	f1 04       	cpc	r15, r1
 678:	09 f4       	brne	.+2      	; 0x67c <PSerial_open+0x48>
 67a:	75 c0       	rjmp	.+234    	; 0x766 <PSerial_open+0x132>
 67c:	8c f4       	brge	.+34     	; 0x6a0 <PSerial_open+0x6c>
 67e:	e0 e6       	ldi	r30, 0x60	; 96
 680:	ce 16       	cp	r12, r30
 682:	e9 e0       	ldi	r30, 0x09	; 9
 684:	de 06       	cpc	r13, r30
 686:	e1 04       	cpc	r14, r1
 688:	f1 04       	cpc	r15, r1
 68a:	09 f4       	brne	.+2      	; 0x68e <PSerial_open+0x5a>
 68c:	5e c0       	rjmp	.+188    	; 0x74a <PSerial_open+0x116>
 68e:	f0 ec       	ldi	r31, 0xC0	; 192
 690:	cf 16       	cp	r12, r31
 692:	f2 e1       	ldi	r31, 0x12	; 18
 694:	df 06       	cpc	r13, r31
 696:	e1 04       	cpc	r14, r1
 698:	f1 04       	cpc	r15, r1
 69a:	09 f4       	brne	.+2      	; 0x69e <PSerial_open+0x6a>
 69c:	5d c0       	rjmp	.+186    	; 0x758 <PSerial_open+0x124>
 69e:	b7 c0       	rjmp	.+366    	; 0x80e <PSerial_open+0x1da>
 6a0:	c1 14       	cp	r12, r1
 6a2:	8b e4       	ldi	r24, 0x4B	; 75
 6a4:	d8 06       	cpc	r13, r24
 6a6:	e1 04       	cpc	r14, r1
 6a8:	f1 04       	cpc	r15, r1
 6aa:	09 f4       	brne	.+2      	; 0x6ae <PSerial_open+0x7a>
 6ac:	6a c0       	rjmp	.+212    	; 0x782 <PSerial_open+0x14e>
 6ae:	e0 e8       	ldi	r30, 0x80	; 128
 6b0:	ce 16       	cp	r12, r30
 6b2:	e0 e7       	ldi	r30, 0x70	; 112
 6b4:	de 06       	cpc	r13, r30
 6b6:	e1 04       	cpc	r14, r1
 6b8:	f1 04       	cpc	r15, r1
 6ba:	09 f4       	brne	.+2      	; 0x6be <PSerial_open+0x8a>
 6bc:	69 c0       	rjmp	.+210    	; 0x790 <PSerial_open+0x15c>
 6be:	f0 e4       	ldi	r31, 0x40	; 64
 6c0:	cf 16       	cp	r12, r31
 6c2:	f8 e3       	ldi	r31, 0x38	; 56
 6c4:	df 06       	cpc	r13, r31
 6c6:	e1 04       	cpc	r14, r1
 6c8:	f1 04       	cpc	r15, r1
 6ca:	09 f0       	breq	.+2      	; 0x6ce <PSerial_open+0x9a>
 6cc:	a0 c0       	rjmp	.+320    	; 0x80e <PSerial_open+0x1da>
 6ce:	52 c0       	rjmp	.+164    	; 0x774 <PSerial_open+0x140>
 6d0:	c1 14       	cp	r12, r1
 6d2:	84 e8       	ldi	r24, 0x84	; 132
 6d4:	d8 06       	cpc	r13, r24
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	e8 06       	cpc	r14, r24
 6da:	f1 04       	cpc	r15, r1
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <PSerial_open+0xac>
 6de:	7b c0       	rjmp	.+246    	; 0x7d6 <PSerial_open+0x1a2>
 6e0:	c4 f4       	brge	.+48     	; 0x712 <PSerial_open+0xde>
 6e2:	c1 14       	cp	r12, r1
 6e4:	fc e2       	ldi	r31, 0x2C	; 44
 6e6:	df 06       	cpc	r13, r31
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
 6ea:	ef 06       	cpc	r14, r31
 6ec:	f1 04       	cpc	r15, r1
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <PSerial_open+0xbe>
 6f0:	64 c0       	rjmp	.+200    	; 0x7ba <PSerial_open+0x186>
 6f2:	c1 14       	cp	r12, r1
 6f4:	82 ec       	ldi	r24, 0xC2	; 194
 6f6:	d8 06       	cpc	r13, r24
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	e8 06       	cpc	r14, r24
 6fc:	f1 04       	cpc	r15, r1
 6fe:	09 f4       	brne	.+2      	; 0x702 <PSerial_open+0xce>
 700:	63 c0       	rjmp	.+198    	; 0x7c8 <PSerial_open+0x194>
 702:	c1 14       	cp	r12, r1
 704:	e1 ee       	ldi	r30, 0xE1	; 225
 706:	de 06       	cpc	r13, r30
 708:	e1 04       	cpc	r14, r1
 70a:	f1 04       	cpc	r15, r1
 70c:	09 f0       	breq	.+2      	; 0x710 <PSerial_open+0xdc>
 70e:	7f c0       	rjmp	.+254    	; 0x80e <PSerial_open+0x1da>
 710:	4d c0       	rjmp	.+154    	; 0x7ac <PSerial_open+0x178>
 712:	f0 e2       	ldi	r31, 0x20	; 32
 714:	cf 16       	cp	r12, r31
 716:	f1 ea       	ldi	r31, 0xA1	; 161
 718:	df 06       	cpc	r13, r31
 71a:	f7 e0       	ldi	r31, 0x07	; 7
 71c:	ef 06       	cpc	r14, r31
 71e:	f1 04       	cpc	r15, r1
 720:	09 f4       	brne	.+2      	; 0x724 <PSerial_open+0xf0>
 722:	67 c0       	rjmp	.+206    	; 0x7f2 <PSerial_open+0x1be>
 724:	80 e4       	ldi	r24, 0x40	; 64
 726:	c8 16       	cp	r12, r24
 728:	82 e4       	ldi	r24, 0x42	; 66
 72a:	d8 06       	cpc	r13, r24
 72c:	8f e0       	ldi	r24, 0x0F	; 15
 72e:	e8 06       	cpc	r14, r24
 730:	f1 04       	cpc	r15, r1
 732:	09 f4       	brne	.+2      	; 0x736 <PSerial_open+0x102>
 734:	65 c0       	rjmp	.+202    	; 0x800 <PSerial_open+0x1cc>
 736:	e0 e9       	ldi	r30, 0x90	; 144
 738:	ce 16       	cp	r12, r30
 73a:	e0 ed       	ldi	r30, 0xD0	; 208
 73c:	de 06       	cpc	r13, r30
 73e:	e3 e0       	ldi	r30, 0x03	; 3
 740:	ee 06       	cpc	r14, r30
 742:	f1 04       	cpc	r15, r1
 744:	09 f0       	breq	.+2      	; 0x748 <PSerial_open+0x114>
 746:	63 c0       	rjmp	.+198    	; 0x80e <PSerial_open+0x1da>
 748:	4d c0       	rjmp	.+154    	; 0x7e4 <PSerial_open+0x1b0>
 74a:	e9 81       	ldd	r30, Y+1	; 0x01
 74c:	fa 81       	ldd	r31, Y+2	; 0x02
 74e:	80 e4       	ldi	r24, 0x40	; 64
 750:	93 e0       	ldi	r25, 0x03	; 3
 752:	95 83       	std	Z+5, r25	; 0x05
 754:	84 83       	std	Z+4, r24	; 0x04
 756:	77 c0       	rjmp	.+238    	; 0x846 <PSerial_open+0x212>
 758:	e9 81       	ldd	r30, Y+1	; 0x01
 75a:	fa 81       	ldd	r31, Y+2	; 0x02
 75c:	80 ea       	ldi	r24, 0xA0	; 160
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	95 83       	std	Z+5, r25	; 0x05
 762:	84 83       	std	Z+4, r24	; 0x04
 764:	70 c0       	rjmp	.+224    	; 0x846 <PSerial_open+0x212>
 766:	e9 81       	ldd	r30, Y+1	; 0x01
 768:	fa 81       	ldd	r31, Y+2	; 0x02
 76a:	8f ec       	ldi	r24, 0xCF	; 207
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	95 83       	std	Z+5, r25	; 0x05
 770:	84 83       	std	Z+4, r24	; 0x04
 772:	69 c0       	rjmp	.+210    	; 0x846 <PSerial_open+0x212>
 774:	e9 81       	ldd	r30, Y+1	; 0x01
 776:	fa 81       	ldd	r31, Y+2	; 0x02
 778:	8a e8       	ldi	r24, 0x8A	; 138
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	95 83       	std	Z+5, r25	; 0x05
 77e:	84 83       	std	Z+4, r24	; 0x04
 780:	62 c0       	rjmp	.+196    	; 0x846 <PSerial_open+0x212>
 782:	e9 81       	ldd	r30, Y+1	; 0x01
 784:	fa 81       	ldd	r31, Y+2	; 0x02
 786:	87 e6       	ldi	r24, 0x67	; 103
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	95 83       	std	Z+5, r25	; 0x05
 78c:	84 83       	std	Z+4, r24	; 0x04
 78e:	5b c0       	rjmp	.+182    	; 0x846 <PSerial_open+0x212>
 790:	e9 81       	ldd	r30, Y+1	; 0x01
 792:	fa 81       	ldd	r31, Y+2	; 0x02
 794:	84 e4       	ldi	r24, 0x44	; 68
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	95 83       	std	Z+5, r25	; 0x05
 79a:	84 83       	std	Z+4, r24	; 0x04
 79c:	54 c0       	rjmp	.+168    	; 0x846 <PSerial_open+0x212>
 79e:	e9 81       	ldd	r30, Y+1	; 0x01
 7a0:	fa 81       	ldd	r31, Y+2	; 0x02
 7a2:	83 e3       	ldi	r24, 0x33	; 51
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	95 83       	std	Z+5, r25	; 0x05
 7a8:	84 83       	std	Z+4, r24	; 0x04
 7aa:	4d c0       	rjmp	.+154    	; 0x846 <PSerial_open+0x212>
 7ac:	e9 81       	ldd	r30, Y+1	; 0x01
 7ae:	fa 81       	ldd	r31, Y+2	; 0x02
 7b0:	81 e2       	ldi	r24, 0x21	; 33
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	95 83       	std	Z+5, r25	; 0x05
 7b6:	84 83       	std	Z+4, r24	; 0x04
 7b8:	46 c0       	rjmp	.+140    	; 0x846 <PSerial_open+0x212>
 7ba:	e9 81       	ldd	r30, Y+1	; 0x01
 7bc:	fa 81       	ldd	r31, Y+2	; 0x02
 7be:	89 e1       	ldi	r24, 0x19	; 25
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	95 83       	std	Z+5, r25	; 0x05
 7c4:	84 83       	std	Z+4, r24	; 0x04
 7c6:	3f c0       	rjmp	.+126    	; 0x846 <PSerial_open+0x212>
 7c8:	e9 81       	ldd	r30, Y+1	; 0x01
 7ca:	fa 81       	ldd	r31, Y+2	; 0x02
 7cc:	80 e1       	ldi	r24, 0x10	; 16
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	95 83       	std	Z+5, r25	; 0x05
 7d2:	84 83       	std	Z+4, r24	; 0x04
 7d4:	38 c0       	rjmp	.+112    	; 0x846 <PSerial_open+0x212>
 7d6:	e9 81       	ldd	r30, Y+1	; 0x01
 7d8:	fa 81       	ldd	r31, Y+2	; 0x02
 7da:	88 e0       	ldi	r24, 0x08	; 8
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	95 83       	std	Z+5, r25	; 0x05
 7e0:	84 83       	std	Z+4, r24	; 0x04
 7e2:	31 c0       	rjmp	.+98     	; 0x846 <PSerial_open+0x212>
 7e4:	e9 81       	ldd	r30, Y+1	; 0x01
 7e6:	fa 81       	ldd	r31, Y+2	; 0x02
 7e8:	87 e0       	ldi	r24, 0x07	; 7
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	95 83       	std	Z+5, r25	; 0x05
 7ee:	84 83       	std	Z+4, r24	; 0x04
 7f0:	2a c0       	rjmp	.+84     	; 0x846 <PSerial_open+0x212>
 7f2:	e9 81       	ldd	r30, Y+1	; 0x01
 7f4:	fa 81       	ldd	r31, Y+2	; 0x02
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	95 83       	std	Z+5, r25	; 0x05
 7fc:	84 83       	std	Z+4, r24	; 0x04
 7fe:	23 c0       	rjmp	.+70     	; 0x846 <PSerial_open+0x212>
 800:	e9 81       	ldd	r30, Y+1	; 0x01
 802:	fa 81       	ldd	r31, Y+2	; 0x02
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	95 83       	std	Z+5, r25	; 0x05
 80a:	84 83       	std	Z+4, r24	; 0x04
 80c:	1c c0       	rjmp	.+56     	; 0x846 <PSerial_open+0x212>
 80e:	a9 80       	ldd	r10, Y+1	; 0x01
 810:	ba 80       	ldd	r11, Y+2	; 0x02
 812:	d7 01       	movw	r26, r14
 814:	c6 01       	movw	r24, r12
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	aa 1f       	adc	r26, r26
 81c:	bb 1f       	adc	r27, r27
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	aa 1f       	adc	r26, r26
 824:	bb 1f       	adc	r27, r27
 826:	9c 01       	movw	r18, r24
 828:	ad 01       	movw	r20, r26
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	44 1f       	adc	r20, r20
 830:	55 1f       	adc	r21, r21
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	74 e2       	ldi	r23, 0x24	; 36
 836:	84 ef       	ldi	r24, 0xF4	; 244
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	3a d0       	rcall	.+116    	; 0x8b0 <__divmodsi4>
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	31 09       	sbc	r19, r1
 840:	f5 01       	movw	r30, r10
 842:	35 83       	std	Z+5, r19	; 0x05
 844:	24 83       	std	Z+4, r18	; 0x04
 846:	e9 81       	ldd	r30, Y+1	; 0x01
 848:	fa 81       	ldd	r31, Y+2	; 0x02
 84a:	80 81       	ld	r24, Z
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	80 83       	st	Z, r24
 850:	e9 81       	ldd	r30, Y+1	; 0x01
 852:	fa 81       	ldd	r31, Y+2	; 0x02
 854:	81 81       	ldd	r24, Z+1	; 0x01
 856:	88 61       	ori	r24, 0x18	; 24
 858:	81 83       	std	Z+1, r24	; 0x01
 85a:	e9 81       	ldd	r30, Y+1	; 0x01
 85c:	fa 81       	ldd	r31, Y+2	; 0x02
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	21 2f       	mov	r18, r17
 862:	2e 73       	andi	r18, 0x3E	; 62
 864:	28 2b       	or	r18, r24
 866:	22 83       	std	Z+2, r18	; 0x02
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	ff 90       	pop	r15
 874:	ef 90       	pop	r14
 876:	df 90       	pop	r13
 878:	cf 90       	pop	r12
 87a:	bf 90       	pop	r11
 87c:	af 90       	pop	r10
 87e:	08 95       	ret

00000880 <PSerial_writew>:
 *
 * @param port is written to
 * @param data is what to write
 **/
void PSerial_writew(uint8_t port, uint8_t data)
{
 880:	1f 93       	push	r17
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	1f 92       	push	r1
 888:	1f 92       	push	r1
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	16 2f       	mov	r17, r22
	volatile UART_PORT *PORTn;
	get_port(port, &PORTn);
 890:	be 01       	movw	r22, r28
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	ae de       	rcall	.-676    	; 0x5f4 <get_port>
	
	while (!(PORTn->UCSRnA & (1 << UDRE0)));
 898:	e9 81       	ldd	r30, Y+1	; 0x01
 89a:	fa 81       	ldd	r31, Y+2	; 0x02
 89c:	80 81       	ld	r24, Z
 89e:	85 ff       	sbrs	r24, 5
 8a0:	fd cf       	rjmp	.-6      	; 0x89c <PSerial_writew+0x1c>

	PORTn->UDRn = data;
 8a2:	16 83       	std	Z+6, r17	; 0x06
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	08 95       	ret

000008b0 <__divmodsi4>:
 8b0:	05 2e       	mov	r0, r21
 8b2:	97 fb       	bst	r25, 7
 8b4:	16 f4       	brtc	.+4      	; 0x8ba <__divmodsi4+0xa>
 8b6:	00 94       	com	r0
 8b8:	0f d0       	rcall	.+30     	; 0x8d8 <__negsi2>
 8ba:	57 fd       	sbrc	r21, 7
 8bc:	05 d0       	rcall	.+10     	; 0x8c8 <__divmodsi4_neg2>
 8be:	14 d0       	rcall	.+40     	; 0x8e8 <__udivmodsi4>
 8c0:	07 fc       	sbrc	r0, 7
 8c2:	02 d0       	rcall	.+4      	; 0x8c8 <__divmodsi4_neg2>
 8c4:	46 f4       	brtc	.+16     	; 0x8d6 <__divmodsi4_exit>
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__negsi2>

000008c8 <__divmodsi4_neg2>:
 8c8:	50 95       	com	r21
 8ca:	40 95       	com	r20
 8cc:	30 95       	com	r19
 8ce:	21 95       	neg	r18
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	4f 4f       	sbci	r20, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255

000008d6 <__divmodsi4_exit>:
 8d6:	08 95       	ret

000008d8 <__negsi2>:
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__udivmodsi4>:
 8e8:	a1 e2       	ldi	r26, 0x21	; 33
 8ea:	1a 2e       	mov	r1, r26
 8ec:	aa 1b       	sub	r26, r26
 8ee:	bb 1b       	sub	r27, r27
 8f0:	fd 01       	movw	r30, r26
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <__udivmodsi4_ep>

000008f4 <__udivmodsi4_loop>:
 8f4:	aa 1f       	adc	r26, r26
 8f6:	bb 1f       	adc	r27, r27
 8f8:	ee 1f       	adc	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	a2 17       	cp	r26, r18
 8fe:	b3 07       	cpc	r27, r19
 900:	e4 07       	cpc	r30, r20
 902:	f5 07       	cpc	r31, r21
 904:	20 f0       	brcs	.+8      	; 0x90e <__udivmodsi4_ep>
 906:	a2 1b       	sub	r26, r18
 908:	b3 0b       	sbc	r27, r19
 90a:	e4 0b       	sbc	r30, r20
 90c:	f5 0b       	sbc	r31, r21

0000090e <__udivmodsi4_ep>:
 90e:	66 1f       	adc	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	1a 94       	dec	r1
 918:	69 f7       	brne	.-38     	; 0x8f4 <__udivmodsi4_loop>
 91a:	60 95       	com	r22
 91c:	70 95       	com	r23
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	9b 01       	movw	r18, r22
 924:	ac 01       	movw	r20, r24
 926:	bd 01       	movw	r22, r26
 928:	cf 01       	movw	r24, r30
 92a:	08 95       	ret

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
